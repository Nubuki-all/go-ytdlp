// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.
//
// Authentication Option Group

package ytdlp

// Login with this account ID
//
//   - See [Command.UnsetUsername], for unsetting the flag.
//   - Username maps to cli flags: -u/--username=USERNAME.
func (c *Command) Username(username string) *Command {
	c.addFlag(&Flag{
		ID:   "username",
		Flag: "--username",
		Args: []string{username},
	})
	return c
}

// UnsetUsername unsets any flags that were previously set by
// [Username].
func (c *Command) UnsetUsername() *Command {
	c.removeFlagByID("username")
	return c
}

// Account password. If this option is left out, yt-dlp will ask interactively
//
//   - See [Command.UnsetPassword], for unsetting the flag.
//   - Password maps to cli flags: -p/--password=PASSWORD.
func (c *Command) Password(password string) *Command {
	c.addFlag(&Flag{
		ID:   "password",
		Flag: "--password",
		Args: []string{password},
	})
	return c
}

// UnsetPassword unsets any flags that were previously set by
// [Password].
func (c *Command) UnsetPassword() *Command {
	c.removeFlagByID("password")
	return c
}

// Two-factor authentication code
//
//   - See [Command.UnsetTwofactor], for unsetting the flag.
//   - Twofactor maps to cli flags: -2/--twofactor=TWOFACTOR.
func (c *Command) Twofactor(twofactor string) *Command {
	c.addFlag(&Flag{
		ID:   "twofactor",
		Flag: "--twofactor",
		Args: []string{twofactor},
	})
	return c
}

// UnsetTwofactor unsets any flags that were previously set by
// [Twofactor].
func (c *Command) UnsetTwofactor() *Command {
	c.removeFlagByID("twofactor")
	return c
}

// Use .netrc authentication data
//
//   - See [Command.UnsetNetrc], for unsetting the flag.
//   - Netrc maps to cli flags: -n/--netrc.
func (c *Command) Netrc() *Command {
	c.addFlag(&Flag{
		ID:   "usenetrc",
		Flag: "--netrc",
		Args: nil,
	})
	return c
}

// UnsetNetrc unsets any flags that were previously set by
// [Netrc].
func (c *Command) UnsetNetrc() *Command {
	c.removeFlagByID("usenetrc")
	return c
}

// Location of .netrc authentication data; either the path or its containing
// directory. Defaults to ~/.netrc
//
//   - See [Command.UnsetNetrcLocation], for unsetting the flag.
//   - NetrcLocation maps to cli flags: --netrc-location=PATH.
func (c *Command) NetrcLocation(path string) *Command {
	c.addFlag(&Flag{
		ID:   "netrc_location",
		Flag: "--netrc-location",
		Args: []string{path},
	})
	return c
}

// UnsetNetrcLocation unsets any flags that were previously set by
// [NetrcLocation].
func (c *Command) UnsetNetrcLocation() *Command {
	c.removeFlagByID("netrc_location")
	return c
}

// Command to execute to get the credentials for an extractor.
//
//   - See [Command.UnsetNetrcCmd], for unsetting the flag.
//   - NetrcCmd maps to cli flags: --netrc-cmd=NETRC_CMD.
func (c *Command) NetrcCmd(netrcCmd string) *Command {
	c.addFlag(&Flag{
		ID:   "netrc_cmd",
		Flag: "--netrc-cmd",
		Args: []string{netrcCmd},
	})
	return c
}

// UnsetNetrcCmd unsets any flags that were previously set by
// [NetrcCmd].
func (c *Command) UnsetNetrcCmd() *Command {
	c.removeFlagByID("netrc_cmd")
	return c
}

// Video password (vimeo, youku)
//
//   - See [Command.UnsetVideoPassword], for unsetting the flag.
//   - VideoPassword maps to cli flags: --video-password=PASSWORD.
func (c *Command) VideoPassword(password string) *Command {
	c.addFlag(&Flag{
		ID:   "videopassword",
		Flag: "--video-password",
		Args: []string{password},
	})
	return c
}

// UnsetVideoPassword unsets any flags that were previously set by
// [VideoPassword].
func (c *Command) UnsetVideoPassword() *Command {
	c.removeFlagByID("videopassword")
	return c
}

// Adobe Pass multiple-system operator (TV provider) identifier, use --ap-list-mso
// for a list of available MSOs
//
//   - See [Command.UnsetApMso], for unsetting the flag.
//   - ApMso maps to cli flags: --ap-mso=MSO.
func (c *Command) ApMso(mso string) *Command {
	c.addFlag(&Flag{
		ID:   "ap_mso",
		Flag: "--ap-mso",
		Args: []string{mso},
	})
	return c
}

// UnsetApMso unsets any flags that were previously set by
// [ApMso].
func (c *Command) UnsetApMso() *Command {
	c.removeFlagByID("ap_mso")
	return c
}

// Multiple-system operator account login
//
//   - See [Command.UnsetApUsername], for unsetting the flag.
//   - ApUsername maps to cli flags: --ap-username=USERNAME.
func (c *Command) ApUsername(username string) *Command {
	c.addFlag(&Flag{
		ID:   "ap_username",
		Flag: "--ap-username",
		Args: []string{username},
	})
	return c
}

// UnsetApUsername unsets any flags that were previously set by
// [ApUsername].
func (c *Command) UnsetApUsername() *Command {
	c.removeFlagByID("ap_username")
	return c
}

// Multiple-system operator account password. If this option is left out, yt-dlp
// will ask interactively
//
//   - See [Command.UnsetApPassword], for unsetting the flag.
//   - ApPassword maps to cli flags: --ap-password=PASSWORD.
func (c *Command) ApPassword(password string) *Command {
	c.addFlag(&Flag{
		ID:   "ap_password",
		Flag: "--ap-password",
		Args: []string{password},
	})
	return c
}

// UnsetApPassword unsets any flags that were previously set by
// [ApPassword].
func (c *Command) UnsetApPassword() *Command {
	c.removeFlagByID("ap_password")
	return c
}

// List all supported multiple-system operators
//
//   - See [Command.UnsetApListMso], for unsetting the flag.
//   - ApListMso maps to cli flags: --ap-list-mso.
func (c *Command) ApListMso() *Command {
	c.addFlag(&Flag{
		ID:   "ap_list_mso",
		Flag: "--ap-list-mso",
		Args: nil,
	})
	return c
}

// UnsetApListMso unsets any flags that were previously set by
// [ApListMso].
func (c *Command) UnsetApListMso() *Command {
	c.removeFlagByID("ap_list_mso")
	return c
}

// Path to client certificate file in PEM format. May include the private key
//
//   - See [Command.UnsetClientCertificate], for unsetting the flag.
//   - ClientCertificate maps to cli flags: --client-certificate=CERTFILE.
func (c *Command) ClientCertificate(certfile string) *Command {
	c.addFlag(&Flag{
		ID:   "client_certificate",
		Flag: "--client-certificate",
		Args: []string{certfile},
	})
	return c
}

// UnsetClientCertificate unsets any flags that were previously set by
// [ClientCertificate].
func (c *Command) UnsetClientCertificate() *Command {
	c.removeFlagByID("client_certificate")
	return c
}

// Path to private key file for client certificate
//
//   - See [Command.UnsetClientCertificateKey], for unsetting the flag.
//   - ClientCertificateKey maps to cli flags: --client-certificate-key=KEYFILE.
func (c *Command) ClientCertificateKey(keyfile string) *Command {
	c.addFlag(&Flag{
		ID:   "client_certificate_key",
		Flag: "--client-certificate-key",
		Args: []string{keyfile},
	})
	return c
}

// UnsetClientCertificateKey unsets any flags that were previously set by
// [ClientCertificateKey].
func (c *Command) UnsetClientCertificateKey() *Command {
	c.removeFlagByID("client_certificate_key")
	return c
}

// Password for client certificate private key, if encrypted. If not provided, and
// the key is encrypted, yt-dlp will ask interactively
//
//   - See [Command.UnsetClientCertificatePassword], for unsetting the flag.
//   - ClientCertificatePassword maps to cli flags: --client-certificate-password=PASSWORD.
func (c *Command) ClientCertificatePassword(password string) *Command {
	c.addFlag(&Flag{
		ID:   "client_certificate_password",
		Flag: "--client-certificate-password",
		Args: []string{password},
	})
	return c
}

// UnsetClientCertificatePassword unsets any flags that were previously set by
// [ClientCertificatePassword].
func (c *Command) UnsetClientCertificatePassword() *Command {
	c.removeFlagByID("client_certificate_password")
	return c
}
