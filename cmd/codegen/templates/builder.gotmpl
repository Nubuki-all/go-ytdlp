// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.
//
// {{ .Name }} Option Group
{{- if .Description }} -- Description:
{{- $desc := splitList "\n" (wrap 80 .Description) }}
{{- range $line := $desc }}
//   {{ $line }}
{{- end }}{{/* end range for desc */}}
{{- end }} {{/* end if description */}}

package ytdlp

import (
{{- /* bytes/context (executable) */}}
{{- range $index, $option := .Options }}
{{- if $option.IsExecutable }}
    "context"
    {{ break }}
{{- end }}{{/* end if executable */}}
{{- end }}{{/* end range for options */}}
{{- /* strconv (string conversions) */}}
{{- range $index, $option := .Options }}
{{- if or (eq $option.Type "int") (eq $option.Type "float64") }}
    "strconv"
    {{ break }}
{{- end }}{{/* end if executable */}}
{{- end }}{{/* end range for options */}}
)

{{ range $index, $option := .Options }}
{{/* actual code generation */}}
{{- if $option.Choices }}
// {{ $option.Name | to_camel }}Option are parameter types for [{{ $option.Name | to_camel }}].
type {{ $option.Name | to_camel }}Option {{ $option.Type }}

var (
{{- range $index, $choice := $option.Choices }}
    {{ $option.Name | to_camel }}{{ $choice | to_camel }} {{ $option.Name | to_camel }}Option = {{ if eq $option.Type "string" }}{{ $choice | quote }}{{ else }}{{ $choice }}{{ end }}
{{- end }}
)
{{- end }}{{/* end if choices */}}

{{- if $option.IsExecutable }}
{{ template "builder-help" $option }}
func (c *Command) {{ $option.Name | to_camel }}(ctx context.Context, {{ template "builder-meta-args" $option }}) (*Result, error) {
    c.addFlag(&Flag{
        ID: {{ $option.Dest | quote }},
        Flag: {{ $option.Flag | quote }},
        Args: {{ template "builder-slice-meta-args" $option }},
    })

    return c.runWithResult(c.buildCommand(ctx))
}
{{- else if or (gt $option.NArgs 0) (eq $option.Type "bool") }}
{{ template "builder-help" $option }}
func (c *Command) {{ $option.Name | to_camel }}({{ template "builder-meta-args" $option }}) *Command {
    c.addFlag(&Flag{
        ID: {{ $option.Dest | quote }},
        Flag: {{ $option.Flag | quote }},
        Args: {{ template "builder-slice-meta-args" $option }},
    })
    return c
}

{{- if not (hasPrefix "No" ($option.Name | to_camel)) }}
// Unset{{ $option.Name | to_camel }} unsets any flags that were previously set by
// [Command.{{ $option.Name | to_camel }}].
func (c *Command) Unset{{ $option.Name | to_camel }}() *Command {
    c.removeFlagByID({{ $option.Dest | quote }})
    return c
}
{{- end }}{{/* end if "No" prefixed */}}
{{- end }}{{/* end if type */}}
{{ end }}{{/* end option range */}}
