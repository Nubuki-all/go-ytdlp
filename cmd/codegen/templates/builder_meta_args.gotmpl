{{/*
    template: builder-meta-args
*/}}
{{- define "builder-meta-args" -}}
{{- $option := . -}}
{{- if and (ne $option.Type "bool") (gt $option.NArgs 0) }}
{{- $option.MetaVarFuncArgs | join ", " }} {{ if $option.Choices }}{{ $option.Name | to_camel }}Option{{ else }}{{ $option.Type }}{{ end }}
{{- end }}{{/* end if type */}}
{{- end -}}{{/* end define builder-meta-args */}}

{{/*
    template: builder-slice-meta-args
*/}}
{{- define "builder-slice-meta-args" -}}
{{- $option := . -}}
{{- if or (eq $option.Type "bool") (eq .NArgs 0) }}
nil
{{- else }}
[]string{
    {{- range $index, $arg := .MetaVarFuncArgs }}
    {{- if $option.Choices }}{{/* if choices, type cast back to the original type when we pass in. */}}
    {{- $arg = printf "%s(%s)" $option.Type $arg }}
    {{- end }}{{/* end if choices */}}
    {{- if eq $option.Type "string" }}
    {{- $arg }},
    {{- else if eq $option.Type "int" }}
    strconv.Itoa({{ $arg }}),
    {{- else if eq $option.Type "float64" }}
    strconv.FormatFloat({{ $arg }}, 'g', -1, 64),
    {{- end }}{{/* end if type */}}
    {{- end }}{{/* end range for args */}}
}
{{- end }}{{/* end if type */}}
{{- end -}}{{/* end define builder-slice-meta-args */}}

{{/*
    template: builder-test-args
*/}}
{{- define "builder-test-args" -}}
{{- $option := . -}}
{{- range $n := until $option.NArgs -}}
    {{- if eq $option.Type "string" -}}
        "test"
    {{- else if eq $option.Type "bool" -}}
        true
    {{- else if eq $option.Type "int" -}}
        1
    {{- else if eq $option.Type "float64" -}}
        1.0
    {{- end -}}
    {{- if not (last $n (until $option.NArgs)) }},{{ end -}}
{{- end -}}{{/* end range for args */}}
{{- end -}}{{/* end define builder-test-args */}}
