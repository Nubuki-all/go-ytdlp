// Copyright (c) Liam Stanley <liam@liam.sh>. All rights reserved. Use of
// this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.

package ytdlp

import (
    "testing"
)

func validateFlagAdded(t *testing.T, builder *Command, dest, flag string, nargs int) {
    t.Helper()

    err := builder.flagConfig.Validate()
    if err != nil {
        t.Fatalf("expected no validation errors, but got: %v", err)
    }

    for _, f := range builder.flagConfig.ToFlags().FindByID(dest) {
        if f.Flag != flag || len(f.Args) != nargs {
            t.Errorf("expected flag %q (dest: %q) to be added, but it was not (or was incorrectly", flag, dest)
        }

        // Make sure flag.Raw() doesn't panic and has at least some content.
        raw := f.Raw()
        if raw == nil {
            t.Errorf("expected flag %q (dest: %q) to have a non-nil Raw() value", flag, dest)
        }

        if len(raw) != nargs + 1 {
            t.Errorf("expected flag %q.Raw() (dest: %q) to have %d args, but it had %d", flag, dest, nargs, len(raw) - 1)
        }
    }

}

func validateFlagRemoved(t *testing.T, builder *Command, dest, flag string) {
    t.Helper()

    err := builder.flagConfig.Validate()
    if err != nil {
        t.Fatalf("expected no validation errors, but got: %v", err)
    }

    if len(builder.flagConfig.ToFlags().FindByID(dest)) != 0 {
        t.Errorf("expected flag %q (dest: %q) to be removed, but it was not", flag, dest)
    }
}

{{ range $group := .OptionGroups }}
func TestBuilder_{{ $group.Name | to_camel | trimSuffix "s" }}_NonExecutable(t *testing.T) {
{{- range $i, $option := .Options }}
{{- $id := ($option.Name | to_camel) -}}
{{- if $option.Executable }}{{ continue }}{{ end }}
    t.Run({{ $id | quote }}, func(t *testing.T) {
        builder := New().{{ $id }}({{ template "builder-test-args" $option }})
        validateFlagAdded(t, builder, {{ $option.ID | quote }}, {{ $option.Flag | quote }}, {{ $option.NArgs }})
        _ = builder.Unset{{ $id | trimPrefix "No" | trimPrefix "Yes" }}()
        validateFlagRemoved(t, builder, {{ $option.ID | quote }}, {{ $option.Flag | quote }})
    })
{{- end }}{{/* end range for options */}}
}
{{ end }}{{/* end range for option groups */}}
