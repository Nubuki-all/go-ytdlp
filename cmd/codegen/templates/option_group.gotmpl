{{/* global variables */}}
{{- $id :=  .Name | to_camel | trimSuffix "s" -}}
{{- $id_lower := to_lower_camel $id -}}

{{/* template helpers */}}
{{- define "optionHelp" -}}
{{- if .Help }}
// {{ wrap 80 .Help | replace "\n" "\n// " }}
{{- else if eq .Type "bool" }}
// {{ .Name | to_camel }} sets the {{ .Name | quote }} flag (no description specified).
{{- end }}{{/* end if help */}}
//
// {{ .Name | to_camel }} maps to cli flags: {{ .AllFlags | join "/" }}{{ if .MetaVar }}={{ .MetaVar }}{{ end }}{{ if .Hidden }} (hidden){{ end }}.
{{- end -}}{{/* end define optionHelp */}}

{{- /* start of actual file */ -}}
// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.
//
// {{ .Name }} Option Group
{{- if .Description }} -- Description:
{{- $desc := splitList "\n" (wrap 80 .Description) }}
{{- range $line := $desc }}
//   {{ $line }}
{{- end }}{{/* end range for desc */}}
{{- end }} {{/* end if description */}}

package ytdlp

{{- if .NeedsStrconv }}
import (
    "strconv"
)
{{ end }}{{/* if needs strconv */}}

{{ range $index, $option := .Options }}
{{/* iterator skipping logic */}}
{{- if $option.IsExecutable }}{{ continue }}{{ end -}}

{{/* actual code generation */}}
{{- if $option.Choices }}
var {{ $option.Name | to_lower_camel }}Choices = []string{
{{- range $index, $choice := $option.Choices }}
    {{ $choice | quote }},
{{- end }}
}
{{- end }}{{/* end if choices */}}

{{- if eq $option.Type "bool" }}
{{ template "optionHelp" $option }}
func (c *Command) {{ $option.Name | to_camel }}() *Command {
    c.addFlag(&Flag{
        ID: {{ $option.Dest | quote }},
        Flag: {{ $option.Flag | quote }},
        Args: nil,
    })
    return c
}
{{- else if gt $option.NArgs 0 }}
{{ template "optionHelp" $option }}
func (c *Command) {{ $option.Name | to_camel }}({{ $option.MetaVarFuncArgs | join ", " }} {{ $option.Type }}) *Command {
    c.addFlag(&Flag{
        ID: {{ $option.Dest | quote }},
        Flag: {{ $option.Flag | quote }},
        Args: []string{
            {{- range $index, $arg := $option.MetaVarFuncArgs }}
            {{- if eq $option.Type "string" }}
            {{- $arg }},
            {{- else if eq $option.Type "int" }}
            strconv.Itoa({{ $arg }}),
            {{- else if eq $option.Type "float64" }}
            strconv.FormatFloat({{ $arg }}, 'g', -1, 64),
            {{- end }}{{/* end if type */}}
            {{- end }}{{/* end range for args */}}
        },
    })
    return c
}
{{- end }}{{/* end if type */}}

// Unset{{ $option.Name | to_camel }} unsets any flags that were previously set by
// {{ $option.Name | to_camel }}().
func (c *Command) Unset{{ $option.Name | to_camel }}() *Command {
    c.removeFlagByID({{ $option.Dest | quote }})
    return c
}
{{ end }}{{/* end option range */}}
