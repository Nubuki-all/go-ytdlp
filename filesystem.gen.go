// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.
//
// Filesystem Option Group

package ytdlp

type FilesystemBuilder struct {
	parent *Command
}

type batchFileFlag struct {
	args []string
}

var _ Flag = (*batchFileFlag)(nil) // ensure batchFileFlag implements Flag interface.

func (f *batchFileFlag) ID() string {
	return "batchfile"
}

func (f *batchFileFlag) String() string {
	return "TODO"
}

func (f *batchFileFlag) AsFlag() []string {
	return []string{"TODO"}
}

// File containing URLs to download ("-" for stdin), one URL per line. Lines
// starting with "#", ";" or "]" are considered as comments and ignored
//
// BatchFile maps to cli flags: -a/--batch-file=FILE.
func (ff *FilesystemBuilder) BatchFile(file string) *FilesystemBuilder {
	ff.parent.addFlag(&batchFileFlag{
		args: []string{file},
	})
	return ff
}

type noBatchFileFlag struct {
}

var _ Flag = (*noBatchFileFlag)(nil) // ensure noBatchFileFlag implements Flag interface.

func (f *noBatchFileFlag) ID() string {
	return "batchfile"
}

func (f *noBatchFileFlag) String() string {
	return "TODO"
}

func (f *noBatchFileFlag) AsFlag() []string {
	return []string{"TODO"}
}

type idFlag struct {
}

var _ Flag = (*idFlag)(nil) // ensure idFlag implements Flag interface.

func (f *idFlag) ID() string {
	return "useid"
}

func (f *idFlag) String() string {
	return "TODO"
}

func (f *idFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Id sets the "id" flag to "true".
//
// Id maps to cli flags: --id.
func (ff *FilesystemBuilder) Id() *FilesystemBuilder {
	ff.parent.addFlag(&idFlag{})
	return ff
}

type outputNaPlaceholderFlag struct {
	args []string
}

var _ Flag = (*outputNaPlaceholderFlag)(nil) // ensure outputNaPlaceholderFlag implements Flag interface.

func (f *outputNaPlaceholderFlag) ID() string {
	return "outtmpl_na_placeholder"
}

func (f *outputNaPlaceholderFlag) String() string {
	return "TODO"
}

func (f *outputNaPlaceholderFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Placeholder for unavailable fields in "OUTPUT TEMPLATE" (default: "%default")
//
// OutputNaPlaceholder maps to cli flags: --output-na-placeholder=TEXT.
func (ff *FilesystemBuilder) OutputNaPlaceholder(text string) *FilesystemBuilder {
	ff.parent.addFlag(&outputNaPlaceholderFlag{
		args: []string{text},
	})
	return ff
}

type autonumberSizeFlag struct {
	args []int
}

var _ Flag = (*autonumberSizeFlag)(nil) // ensure autonumberSizeFlag implements Flag interface.

func (f *autonumberSizeFlag) ID() string {
	return "autonumber_size"
}

func (f *autonumberSizeFlag) String() string {
	return "TODO"
}

func (f *autonumberSizeFlag) AsFlag() []string {
	return []string{"TODO"}
}

// AutonumberSize maps to cli flags: --autonumber-size=NUMBER.
func (ff *FilesystemBuilder) AutonumberSize(number int) *FilesystemBuilder {
	ff.parent.addFlag(&autonumberSizeFlag{
		args: []int{number},
	})
	return ff
}

type autonumberStartFlag struct {
	args []int
}

var _ Flag = (*autonumberStartFlag)(nil) // ensure autonumberStartFlag implements Flag interface.

func (f *autonumberStartFlag) ID() string {
	return "autonumber_start"
}

func (f *autonumberStartFlag) String() string {
	return "TODO"
}

func (f *autonumberStartFlag) AsFlag() []string {
	return []string{"TODO"}
}

// AutonumberStart maps to cli flags: --autonumber-start=NUMBER.
func (ff *FilesystemBuilder) AutonumberStart(number int) *FilesystemBuilder {
	ff.parent.addFlag(&autonumberStartFlag{
		args: []int{number},
	})
	return ff
}

type restrictFilenamesFlag struct {
}

var _ Flag = (*restrictFilenamesFlag)(nil) // ensure restrictFilenamesFlag implements Flag interface.

func (f *restrictFilenamesFlag) ID() string {
	return "restrictfilenames"
}

func (f *restrictFilenamesFlag) String() string {
	return "TODO"
}

func (f *restrictFilenamesFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Restrict filenames to only ASCII characters, and avoid "&" and spaces in
// filenames
//
// RestrictFilenames maps to cli flags: --restrict-filenames.
func (ff *FilesystemBuilder) RestrictFilenames() *FilesystemBuilder {
	ff.parent.addFlag(&restrictFilenamesFlag{})
	return ff
}

type noRestrictFilenamesFlag struct {
}

var _ Flag = (*noRestrictFilenamesFlag)(nil) // ensure noRestrictFilenamesFlag implements Flag interface.

func (f *noRestrictFilenamesFlag) ID() string {
	return "restrictfilenames"
}

func (f *noRestrictFilenamesFlag) String() string {
	return "TODO"
}

func (f *noRestrictFilenamesFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Allow Unicode characters, "&" and spaces in filenames (default)
//
// NoRestrictFilenames maps to cli flags: --no-restrict-filenames.
func (ff *FilesystemBuilder) NoRestrictFilenames() *FilesystemBuilder {
	ff.parent.addFlag(&noRestrictFilenamesFlag{})
	return ff
}

type windowsFilenamesFlag struct {
}

var _ Flag = (*windowsFilenamesFlag)(nil) // ensure windowsFilenamesFlag implements Flag interface.

func (f *windowsFilenamesFlag) ID() string {
	return "windowsfilenames"
}

func (f *windowsFilenamesFlag) String() string {
	return "TODO"
}

func (f *windowsFilenamesFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Force filenames to be Windows-compatible
//
// WindowsFilenames maps to cli flags: --windows-filenames.
func (ff *FilesystemBuilder) WindowsFilenames() *FilesystemBuilder {
	ff.parent.addFlag(&windowsFilenamesFlag{})
	return ff
}

type noWindowsFilenamesFlag struct {
}

var _ Flag = (*noWindowsFilenamesFlag)(nil) // ensure noWindowsFilenamesFlag implements Flag interface.

func (f *noWindowsFilenamesFlag) ID() string {
	return "windowsfilenames"
}

func (f *noWindowsFilenamesFlag) String() string {
	return "TODO"
}

func (f *noWindowsFilenamesFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Make filenames Windows-compatible only if using Windows (default)
//
// NoWindowsFilenames maps to cli flags: --no-windows-filenames.
func (ff *FilesystemBuilder) NoWindowsFilenames() *FilesystemBuilder {
	ff.parent.addFlag(&noWindowsFilenamesFlag{})
	return ff
}

type trimFilenamesFlag struct {
	args []int
}

var _ Flag = (*trimFilenamesFlag)(nil) // ensure trimFilenamesFlag implements Flag interface.

func (f *trimFilenamesFlag) ID() string {
	return "trim_file_name"
}

func (f *trimFilenamesFlag) String() string {
	return "TODO"
}

func (f *trimFilenamesFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Limit the filename length (excluding extension) to the specified number of
// characters
//
// TrimFilenames maps to cli flags: --trim-filenames/--trim-file-names=LENGTH.
func (ff *FilesystemBuilder) TrimFilenames(length int) *FilesystemBuilder {
	ff.parent.addFlag(&trimFilenamesFlag{
		args: []int{length},
	})
	return ff
}

type noOverwritesFlag struct {
}

var _ Flag = (*noOverwritesFlag)(nil) // ensure noOverwritesFlag implements Flag interface.

func (f *noOverwritesFlag) ID() string {
	return "overwrites"
}

func (f *noOverwritesFlag) String() string {
	return "TODO"
}

func (f *noOverwritesFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Do not overwrite any files
//
// NoOverwrites maps to cli flags: -w/--no-overwrites.
func (ff *FilesystemBuilder) NoOverwrites() *FilesystemBuilder {
	ff.parent.addFlag(&noOverwritesFlag{})
	return ff
}

type forceOverwritesFlag struct {
}

var _ Flag = (*forceOverwritesFlag)(nil) // ensure forceOverwritesFlag implements Flag interface.

func (f *forceOverwritesFlag) ID() string {
	return "overwrites"
}

func (f *forceOverwritesFlag) String() string {
	return "TODO"
}

func (f *forceOverwritesFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Overwrite all video and metadata files. This option includes --no-continue
//
// ForceOverwrites maps to cli flags: --force-overwrites/--yes-overwrites.
func (ff *FilesystemBuilder) ForceOverwrites() *FilesystemBuilder {
	ff.parent.addFlag(&forceOverwritesFlag{})
	return ff
}

type noForceOverwritesFlag struct {
}

var _ Flag = (*noForceOverwritesFlag)(nil) // ensure noForceOverwritesFlag implements Flag interface.

func (f *noForceOverwritesFlag) ID() string {
	return "overwrites"
}

func (f *noForceOverwritesFlag) String() string {
	return "TODO"
}

func (f *noForceOverwritesFlag) AsFlag() []string {
	return []string{"TODO"}
}

type continueFlag struct {
}

var _ Flag = (*continueFlag)(nil) // ensure continueFlag implements Flag interface.

func (f *continueFlag) ID() string {
	return "continue_dl"
}

func (f *continueFlag) String() string {
	return "TODO"
}

func (f *continueFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Resume partially downloaded files/fragments (default)
//
// Continue maps to cli flags: -c/--continue.
func (ff *FilesystemBuilder) Continue() *FilesystemBuilder {
	ff.parent.addFlag(&continueFlag{})
	return ff
}

type noContinueFlag struct {
}

var _ Flag = (*noContinueFlag)(nil) // ensure noContinueFlag implements Flag interface.

func (f *noContinueFlag) ID() string {
	return "continue_dl"
}

func (f *noContinueFlag) String() string {
	return "TODO"
}

func (f *noContinueFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Do not resume partially downloaded fragments. If the file is not fragmented,
// restart download of the entire file
//
// NoContinue maps to cli flags: --no-continue.
func (ff *FilesystemBuilder) NoContinue() *FilesystemBuilder {
	ff.parent.addFlag(&noContinueFlag{})
	return ff
}

type partFlag struct {
}

var _ Flag = (*partFlag)(nil) // ensure partFlag implements Flag interface.

func (f *partFlag) ID() string {
	return "nopart"
}

func (f *partFlag) String() string {
	return "TODO"
}

func (f *partFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Use .part files instead of writing directly into output file (default)
//
// Part maps to cli flags: --part.
func (ff *FilesystemBuilder) Part() *FilesystemBuilder {
	ff.parent.addFlag(&partFlag{})
	return ff
}

type noPartFlag struct {
}

var _ Flag = (*noPartFlag)(nil) // ensure noPartFlag implements Flag interface.

func (f *noPartFlag) ID() string {
	return "nopart"
}

func (f *noPartFlag) String() string {
	return "TODO"
}

func (f *noPartFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Do not use .part files - write directly into output file
//
// NoPart maps to cli flags: --no-part.
func (ff *FilesystemBuilder) NoPart() *FilesystemBuilder {
	ff.parent.addFlag(&noPartFlag{})
	return ff
}

type mtimeFlag struct {
}

var _ Flag = (*mtimeFlag)(nil) // ensure mtimeFlag implements Flag interface.

func (f *mtimeFlag) ID() string {
	return "updatetime"
}

func (f *mtimeFlag) String() string {
	return "TODO"
}

func (f *mtimeFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Use the Last-modified header to set the file modification time (default)
//
// Mtime maps to cli flags: --mtime.
func (ff *FilesystemBuilder) Mtime() *FilesystemBuilder {
	ff.parent.addFlag(&mtimeFlag{})
	return ff
}

type noMtimeFlag struct {
}

var _ Flag = (*noMtimeFlag)(nil) // ensure noMtimeFlag implements Flag interface.

func (f *noMtimeFlag) ID() string {
	return "updatetime"
}

func (f *noMtimeFlag) String() string {
	return "TODO"
}

func (f *noMtimeFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Do not use the Last-modified header to set the file modification time
//
// NoMtime maps to cli flags: --no-mtime.
func (ff *FilesystemBuilder) NoMtime() *FilesystemBuilder {
	ff.parent.addFlag(&noMtimeFlag{})
	return ff
}

type writeDescriptionFlag struct {
}

var _ Flag = (*writeDescriptionFlag)(nil) // ensure writeDescriptionFlag implements Flag interface.

func (f *writeDescriptionFlag) ID() string {
	return "writedescription"
}

func (f *writeDescriptionFlag) String() string {
	return "TODO"
}

func (f *writeDescriptionFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Write video description to a .description file
//
// WriteDescription maps to cli flags: --write-description.
func (ff *FilesystemBuilder) WriteDescription() *FilesystemBuilder {
	ff.parent.addFlag(&writeDescriptionFlag{})
	return ff
}

type noWriteDescriptionFlag struct {
}

var _ Flag = (*noWriteDescriptionFlag)(nil) // ensure noWriteDescriptionFlag implements Flag interface.

func (f *noWriteDescriptionFlag) ID() string {
	return "writedescription"
}

func (f *noWriteDescriptionFlag) String() string {
	return "TODO"
}

func (f *noWriteDescriptionFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Do not write video description (default)
//
// NoWriteDescription maps to cli flags: --no-write-description.
func (ff *FilesystemBuilder) NoWriteDescription() *FilesystemBuilder {
	ff.parent.addFlag(&noWriteDescriptionFlag{})
	return ff
}

type writeInfoJsonFlag struct {
}

var _ Flag = (*writeInfoJsonFlag)(nil) // ensure writeInfoJsonFlag implements Flag interface.

func (f *writeInfoJsonFlag) ID() string {
	return "writeinfojson"
}

func (f *writeInfoJsonFlag) String() string {
	return "TODO"
}

func (f *writeInfoJsonFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Write video metadata to a .info.json file (this may contain personal
// information)
//
// WriteInfoJson maps to cli flags: --write-info-json.
func (ff *FilesystemBuilder) WriteInfoJson() *FilesystemBuilder {
	ff.parent.addFlag(&writeInfoJsonFlag{})
	return ff
}

type noWriteInfoJsonFlag struct {
}

var _ Flag = (*noWriteInfoJsonFlag)(nil) // ensure noWriteInfoJsonFlag implements Flag interface.

func (f *noWriteInfoJsonFlag) ID() string {
	return "writeinfojson"
}

func (f *noWriteInfoJsonFlag) String() string {
	return "TODO"
}

func (f *noWriteInfoJsonFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Do not write video metadata (default)
//
// NoWriteInfoJson maps to cli flags: --no-write-info-json.
func (ff *FilesystemBuilder) NoWriteInfoJson() *FilesystemBuilder {
	ff.parent.addFlag(&noWriteInfoJsonFlag{})
	return ff
}

type writeAnnotationsFlag struct {
}

var _ Flag = (*writeAnnotationsFlag)(nil) // ensure writeAnnotationsFlag implements Flag interface.

func (f *writeAnnotationsFlag) ID() string {
	return "writeannotations"
}

func (f *writeAnnotationsFlag) String() string {
	return "TODO"
}

func (f *writeAnnotationsFlag) AsFlag() []string {
	return []string{"TODO"}
}

// WriteAnnotations sets the "write-annotations" flag to "true".
//
// WriteAnnotations maps to cli flags: --write-annotations.
func (ff *FilesystemBuilder) WriteAnnotations() *FilesystemBuilder {
	ff.parent.addFlag(&writeAnnotationsFlag{})
	return ff
}

type noWriteAnnotationsFlag struct {
}

var _ Flag = (*noWriteAnnotationsFlag)(nil) // ensure noWriteAnnotationsFlag implements Flag interface.

func (f *noWriteAnnotationsFlag) ID() string {
	return "writeannotations"
}

func (f *noWriteAnnotationsFlag) String() string {
	return "TODO"
}

func (f *noWriteAnnotationsFlag) AsFlag() []string {
	return []string{"TODO"}
}

// NoWriteAnnotations sets the "no-write-annotations" flag to "false".
//
// NoWriteAnnotations maps to cli flags: --no-write-annotations.
func (ff *FilesystemBuilder) NoWriteAnnotations() *FilesystemBuilder {
	ff.parent.addFlag(&noWriteAnnotationsFlag{})
	return ff
}

type writePlaylistMetafilesFlag struct {
}

var _ Flag = (*writePlaylistMetafilesFlag)(nil) // ensure writePlaylistMetafilesFlag implements Flag interface.

func (f *writePlaylistMetafilesFlag) ID() string {
	return "allow_playlist_files"
}

func (f *writePlaylistMetafilesFlag) String() string {
	return "TODO"
}

func (f *writePlaylistMetafilesFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Write playlist metadata in addition to the video metadata when using
// --write-info-json, --write-description etc. (default)
//
// WritePlaylistMetafiles maps to cli flags: --write-playlist-metafiles.
func (ff *FilesystemBuilder) WritePlaylistMetafiles() *FilesystemBuilder {
	ff.parent.addFlag(&writePlaylistMetafilesFlag{})
	return ff
}

type noWritePlaylistMetafilesFlag struct {
}

var _ Flag = (*noWritePlaylistMetafilesFlag)(nil) // ensure noWritePlaylistMetafilesFlag implements Flag interface.

func (f *noWritePlaylistMetafilesFlag) ID() string {
	return "allow_playlist_files"
}

func (f *noWritePlaylistMetafilesFlag) String() string {
	return "TODO"
}

func (f *noWritePlaylistMetafilesFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Do not write playlist metadata when using --write-info-json, --write-description
// etc.
//
// NoWritePlaylistMetafiles maps to cli flags: --no-write-playlist-metafiles.
func (ff *FilesystemBuilder) NoWritePlaylistMetafiles() *FilesystemBuilder {
	ff.parent.addFlag(&noWritePlaylistMetafilesFlag{})
	return ff
}

type cleanInfoJsonFlag struct {
}

var _ Flag = (*cleanInfoJsonFlag)(nil) // ensure cleanInfoJsonFlag implements Flag interface.

func (f *cleanInfoJsonFlag) ID() string {
	return "clean_infojson"
}

func (f *cleanInfoJsonFlag) String() string {
	return "TODO"
}

func (f *cleanInfoJsonFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Remove some internal metadata such as filenames from the infojson (default)
//
// CleanInfoJson maps to cli flags: --clean-info-json/--clean-infojson.
func (ff *FilesystemBuilder) CleanInfoJson() *FilesystemBuilder {
	ff.parent.addFlag(&cleanInfoJsonFlag{})
	return ff
}

type noCleanInfoJsonFlag struct {
}

var _ Flag = (*noCleanInfoJsonFlag)(nil) // ensure noCleanInfoJsonFlag implements Flag interface.

func (f *noCleanInfoJsonFlag) ID() string {
	return "clean_infojson"
}

func (f *noCleanInfoJsonFlag) String() string {
	return "TODO"
}

func (f *noCleanInfoJsonFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Write all fields to the infojson
//
// NoCleanInfoJson maps to cli flags: --no-clean-info-json/--no-clean-infojson.
func (ff *FilesystemBuilder) NoCleanInfoJson() *FilesystemBuilder {
	ff.parent.addFlag(&noCleanInfoJsonFlag{})
	return ff
}

type writeCommentsFlag struct {
}

var _ Flag = (*writeCommentsFlag)(nil) // ensure writeCommentsFlag implements Flag interface.

func (f *writeCommentsFlag) ID() string {
	return "getcomments"
}

func (f *writeCommentsFlag) String() string {
	return "TODO"
}

func (f *writeCommentsFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Retrieve video comments to be placed in the infojson. The comments are fetched
// even without this option if the extraction is known to be quick (Alias:
// --get-comments)
//
// WriteComments maps to cli flags: --write-comments/--get-comments.
func (ff *FilesystemBuilder) WriteComments() *FilesystemBuilder {
	ff.parent.addFlag(&writeCommentsFlag{})
	return ff
}

type noWriteCommentsFlag struct {
}

var _ Flag = (*noWriteCommentsFlag)(nil) // ensure noWriteCommentsFlag implements Flag interface.

func (f *noWriteCommentsFlag) ID() string {
	return "getcomments"
}

func (f *noWriteCommentsFlag) String() string {
	return "TODO"
}

func (f *noWriteCommentsFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Do not retrieve video comments unless the extraction is known to be quick
// (Alias: --no-get-comments)
//
// NoWriteComments maps to cli flags: --no-write-comments/--no-get-comments.
func (ff *FilesystemBuilder) NoWriteComments() *FilesystemBuilder {
	ff.parent.addFlag(&noWriteCommentsFlag{})
	return ff
}

type loadInfoJsonFlag struct {
	args []string
}

var _ Flag = (*loadInfoJsonFlag)(nil) // ensure loadInfoJsonFlag implements Flag interface.

func (f *loadInfoJsonFlag) ID() string {
	return "load_info_filename"
}

func (f *loadInfoJsonFlag) String() string {
	return "TODO"
}

func (f *loadInfoJsonFlag) AsFlag() []string {
	return []string{"TODO"}
}

// JSON file containing the video information (created with the "--write-info-json"
// option)
//
// LoadInfoJson maps to cli flags: --load-info-json/--load-info=FILE.
func (ff *FilesystemBuilder) LoadInfoJson(file string) *FilesystemBuilder {
	ff.parent.addFlag(&loadInfoJsonFlag{
		args: []string{file},
	})
	return ff
}

type cookiesFlag struct {
	args []string
}

var _ Flag = (*cookiesFlag)(nil) // ensure cookiesFlag implements Flag interface.

func (f *cookiesFlag) ID() string {
	return "cookiefile"
}

func (f *cookiesFlag) String() string {
	return "TODO"
}

func (f *cookiesFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Netscape formatted file to read cookies from and dump cookie jar in
//
// Cookies maps to cli flags: --cookies=FILE.
func (ff *FilesystemBuilder) Cookies(file string) *FilesystemBuilder {
	ff.parent.addFlag(&cookiesFlag{
		args: []string{file},
	})
	return ff
}

type noCookiesFlag struct {
}

var _ Flag = (*noCookiesFlag)(nil) // ensure noCookiesFlag implements Flag interface.

func (f *noCookiesFlag) ID() string {
	return "cookiefile"
}

func (f *noCookiesFlag) String() string {
	return "TODO"
}

func (f *noCookiesFlag) AsFlag() []string {
	return []string{"TODO"}
}

type cookiesFromBrowserFlag struct {
	args []string
}

var _ Flag = (*cookiesFromBrowserFlag)(nil) // ensure cookiesFromBrowserFlag implements Flag interface.

func (f *cookiesFromBrowserFlag) ID() string {
	return "cookiesfrombrowser"
}

func (f *cookiesFromBrowserFlag) String() string {
	return "TODO"
}

func (f *cookiesFromBrowserFlag) AsFlag() []string {
	return []string{"TODO"}
}

// The name of the browser to load cookies from. Currently supported browsers are:
// brave, chrome, chromium, edge, firefox, opera, safari, vivaldi. Optionally, the
// KEYRING used for decrypting Chromium cookies on Linux, the name/path of the
// PROFILE to load cookies from, and the CONTAINER name (if Firefox) ("none" for no
// container) can be given with their respective seperators. By default, all
// containers of the most recently accessed profile are used. Currently supported
// keyrings are: basictext, gnomekeyring, kwallet, kwallet5, kwallet6
//
// CookiesFromBrowser maps to cli flags: --cookies-from-browser=BROWSER.
func (ff *FilesystemBuilder) CookiesFromBrowser(browser string) *FilesystemBuilder {
	ff.parent.addFlag(&cookiesFromBrowserFlag{
		args: []string{browser},
	})
	return ff
}

type noCookiesFromBrowserFlag struct {
}

var _ Flag = (*noCookiesFromBrowserFlag)(nil) // ensure noCookiesFromBrowserFlag implements Flag interface.

func (f *noCookiesFromBrowserFlag) ID() string {
	return "cookiesfrombrowser"
}

func (f *noCookiesFromBrowserFlag) String() string {
	return "TODO"
}

func (f *noCookiesFromBrowserFlag) AsFlag() []string {
	return []string{"TODO"}
}

type cacheDirFlag struct {
	args []string
}

var _ Flag = (*cacheDirFlag)(nil) // ensure cacheDirFlag implements Flag interface.

func (f *cacheDirFlag) ID() string {
	return "cachedir"
}

func (f *cacheDirFlag) String() string {
	return "TODO"
}

func (f *cacheDirFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Location in the filesystem where yt-dlp can store some downloaded information
// (such as client ids and signatures) permanently. By default
// ${XDG_CACHE_HOME}/yt-dlp
//
// CacheDir maps to cli flags: --cache-dir=DIR.
func (ff *FilesystemBuilder) CacheDir(dir string) *FilesystemBuilder {
	ff.parent.addFlag(&cacheDirFlag{
		args: []string{dir},
	})
	return ff
}

type noCacheDirFlag struct {
}

var _ Flag = (*noCacheDirFlag)(nil) // ensure noCacheDirFlag implements Flag interface.

func (f *noCacheDirFlag) ID() string {
	return "cachedir"
}

func (f *noCacheDirFlag) String() string {
	return "TODO"
}

func (f *noCacheDirFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Disable filesystem caching
//
// NoCacheDir maps to cli flags: --no-cache-dir.
func (ff *FilesystemBuilder) NoCacheDir() *FilesystemBuilder {
	ff.parent.addFlag(&noCacheDirFlag{})
	return ff
}

type rmCacheDirFlag struct {
}

var _ Flag = (*rmCacheDirFlag)(nil) // ensure rmCacheDirFlag implements Flag interface.

func (f *rmCacheDirFlag) ID() string {
	return "rm_cachedir"
}

func (f *rmCacheDirFlag) String() string {
	return "TODO"
}

func (f *rmCacheDirFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Delete all filesystem cache files
//
// RmCacheDir maps to cli flags: --rm-cache-dir.
func (ff *FilesystemBuilder) RmCacheDir() *FilesystemBuilder {
	ff.parent.addFlag(&rmCacheDirFlag{})
	return ff
}
