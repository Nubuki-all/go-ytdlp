// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.
//
// General Option Group

package ytdlp

type GeneralBuilder struct {
	parent *Command
}

// Then jumps back to the base command builder, if you want to add additional flags
// from another flag builder.
func (ff *GeneralBuilder) Then() *Command {
	return ff.parent
}

// Ignore download and postprocessing errors. The download will be considered
// successful even if the postprocessing fails
//
// IgnoreErrors maps to cli flags: -i/--ignore-errors.
func (ff *GeneralBuilder) IgnoreErrors() *GeneralBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "ignoreerrors",
		Flag: "--ignore-errors",
		Args: nil,
	})
	return ff
}

// Abort downloading of further videos if an error occurs (Alias:
// --no-ignore-errors)
//
// AbortOnError maps to cli flags: --abort-on-error/--no-ignore-errors.
func (ff *GeneralBuilder) AbortOnError() *GeneralBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "ignoreerrors",
		Flag: "--abort-on-error",
		Args: nil,
	})
	return ff
}

// ForceGenericExtractor sets the "force-generic-extractor" flag to "true".
//
// ForceGenericExtractor maps to cli flags: --force-generic-extractor.
func (ff *GeneralBuilder) ForceGenericExtractor() *GeneralBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "force_generic_extractor",
		Flag: "--force-generic-extractor",
		Args: nil,
	})
	return ff
}

// Use this prefix for unqualified URLs. E.g. "gvsearch2:python" downloads two
// videos from google videos for the search term "python". Use the value "auto" to
// let yt-dlp guess ("auto_warning" to emit a warning when guessing). "error" just
// throws an error. The default value "fixup_error" repairs broken URLs, but emits
// an error if this is not possible instead of searching
//
// DefaultSearch maps to cli flags: --default-search=PREFIX.
func (ff *GeneralBuilder) DefaultSearch(prefix string) *GeneralBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "default_search",
		Flag: "--default-search",
		Args: []string{prefix},
	})
	return ff
}

// Don't load any more configuration files except those given by
// --config-locations. For backward compatibility, if this option is found inside
// the system configuration file, the user configuration is not loaded. (Alias:
// --no-config)
//
// IgnoreConfig maps to cli flags: --ignore-config/--no-config.
func (ff *GeneralBuilder) IgnoreConfig() *GeneralBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "ignoreconfig",
		Flag: "--ignore-config",
		Args: nil,
	})
	return ff
}

// Fully extract the videos of a playlist (default)
//
// NoFlatPlaylist maps to cli flags: --no-flat-playlist.
func (ff *GeneralBuilder) NoFlatPlaylist() *GeneralBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "extract_flat",
		Flag: "--no-flat-playlist",
		Args: nil,
	})
	return ff
}

// Download livestreams from the start. Currently only supported for YouTube
// (Experimental)
//
// LiveFromStart maps to cli flags: --live-from-start.
func (ff *GeneralBuilder) LiveFromStart() *GeneralBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "live_from_start",
		Flag: "--live-from-start",
		Args: nil,
	})
	return ff
}

// Download livestreams from the current time (default)
//
// NoLiveFromStart maps to cli flags: --no-live-from-start.
func (ff *GeneralBuilder) NoLiveFromStart() *GeneralBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "live_from_start",
		Flag: "--no-live-from-start",
		Args: nil,
	})
	return ff
}

// Wait for scheduled streams to become available. Pass the minimum number of
// seconds (or range) to wait between retries
//
// WaitForVideo maps to cli flags: --wait-for-video=MIN.
func (ff *GeneralBuilder) WaitForVideo(min string) *GeneralBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "wait_for_video",
		Flag: "--wait-for-video",
		Args: []string{min},
	})
	return ff
}

// Mark videos watched (even with --simulate)
//
// MarkWatched maps to cli flags: --mark-watched.
func (ff *GeneralBuilder) MarkWatched() *GeneralBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "mark_watched",
		Flag: "--mark-watched",
		Args: nil,
	})
	return ff
}

// Do not mark videos watched (default)
//
// NoMarkWatched maps to cli flags: --no-mark-watched.
func (ff *GeneralBuilder) NoMarkWatched() *GeneralBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "mark_watched",
		Flag: "--no-mark-watched",
		Args: nil,
	})
	return ff
}
