// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.
//
// General Option Group

package ytdlp

import (
	"bytes"
	"context"
)

// Print program version and exit
//
//   - Version maps to cli flags: --version.
func (c *Command) Version(ctx context.Context) (*Results, error) {
	c.addFlag(&Flag{
		ID:   "",
		Flag: "--version",
		Args: nil,
	})

	cmd := c.buildCommand(ctx)

	var stdout, stderr bytes.Buffer

	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err := cmd.Run()

	result := &Results{
		Executable: cmd.Path,
		Args:       cmd.Args[1:],
		ExitCode:   cmd.ProcessState.ExitCode(),
		Stdout:     stdout.String(),
		Stderr:     stderr.String(),
	}

	return result, wrapError(err)
}

// Check if updates are available. You cannot update when running from source code;
// Use git to pull the latest changes
//
//   - Update maps to cli flags: -U/--update.
func (c *Command) Update(ctx context.Context) (*Results, error) {
	c.addFlag(&Flag{
		ID:   "update_self",
		Flag: "--update",
		Args: nil,
	})

	cmd := c.buildCommand(ctx)

	var stdout, stderr bytes.Buffer

	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err := cmd.Run()

	result := &Results{
		Executable: cmd.Path,
		Args:       cmd.Args[1:],
		ExitCode:   cmd.ProcessState.ExitCode(),
		Stdout:     stdout.String(),
		Stderr:     stderr.String(),
	}

	return result, wrapError(err)
}

// Do not check for updates (default)
//
//   - See [Command.UnsetUpdate], for unsetting the flag.
//   - NoUpdate maps to cli flags: --no-update.
func (c *Command) NoUpdate() *Command {
	c.addFlag(&Flag{
		ID:   "update_self",
		Flag: "--no-update",
		Args: nil,
	})
	return c
}

// Upgrade/downgrade to a specific version. CHANNEL can be a repository as well.
// CHANNEL and TAG default to "stable" and "latest" respectively if omitted; See
// "UPDATE" for details. Supported channels: stable, nightly
//
//   - UpdateTo maps to cli flags: --update-to=[CHANNEL]@[TAG].
func (c *Command) UpdateTo(ctx context.Context, value string) (*Results, error) {
	c.addFlag(&Flag{
		ID:   "update_self",
		Flag: "--update-to",
		Args: []string{value},
	})

	cmd := c.buildCommand(ctx)

	var stdout, stderr bytes.Buffer

	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err := cmd.Run()

	result := &Results{
		Executable: cmd.Path,
		Args:       cmd.Args[1:],
		ExitCode:   cmd.ProcessState.ExitCode(),
		Stdout:     stdout.String(),
		Stderr:     stderr.String(),
	}

	return result, wrapError(err)
}

// Ignore download and postprocessing errors. The download will be considered
// successful even if the postprocessing fails
//
//   - See [Command.UnsetIgnoreErrors], for unsetting the flag.
//   - IgnoreErrors maps to cli flags: -i/--ignore-errors.
func (c *Command) IgnoreErrors() *Command {
	c.addFlag(&Flag{
		ID:   "ignoreerrors",
		Flag: "--ignore-errors",
		Args: nil,
	})
	return c
}

// UnsetIgnoreErrors unsets any flags that were previously set by
// [IgnoreErrors].
func (c *Command) UnsetIgnoreErrors() *Command {
	c.removeFlagByID("ignoreerrors")
	return c
}

// Continue with next video on download errors; e.g. to skip unavailable videos in
// a playlist (default)
//
//   - See [Command.UnsetAbortOnError], for unsetting the flag.
//   - NoAbortOnError maps to cli flags: --no-abort-on-error.
func (c *Command) NoAbortOnError() *Command {
	c.addFlag(&Flag{
		ID:   "ignoreerrors",
		Flag: "--no-abort-on-error",
		Args: nil,
	})
	return c
}

// Abort downloading of further videos if an error occurs
//
//   - See [Command.UnsetAbortOnError], for unsetting the flag.
//   - AbortOnError maps to cli flags: --abort-on-error/--no-ignore-errors.
func (c *Command) AbortOnError() *Command {
	c.addFlag(&Flag{
		ID:   "ignoreerrors",
		Flag: "--abort-on-error",
		Args: nil,
	})
	return c
}

// UnsetAbortOnError unsets any flags that were previously set by
// [AbortOnError].
func (c *Command) UnsetAbortOnError() *Command {
	c.removeFlagByID("ignoreerrors")
	return c
}

// Display the current user-agent and exit
//
//   - DumpUserAgent maps to cli flags: --dump-user-agent.
func (c *Command) DumpUserAgent(ctx context.Context) (*Results, error) {
	c.addFlag(&Flag{
		ID:   "dump_user_agent",
		Flag: "--dump-user-agent",
		Args: nil,
	})

	cmd := c.buildCommand(ctx)

	var stdout, stderr bytes.Buffer

	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err := cmd.Run()

	result := &Results{
		Executable: cmd.Path,
		Args:       cmd.Args[1:],
		ExitCode:   cmd.ProcessState.ExitCode(),
		Stdout:     stdout.String(),
		Stderr:     stderr.String(),
	}

	return result, wrapError(err)
}

// List all supported extractors and exit
//
//   - ListExtractors maps to cli flags: --list-extractors.
func (c *Command) ListExtractors(ctx context.Context) (*Results, error) {
	c.addFlag(&Flag{
		ID:   "list_extractors",
		Flag: "--list-extractors",
		Args: nil,
	})

	cmd := c.buildCommand(ctx)

	var stdout, stderr bytes.Buffer

	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err := cmd.Run()

	result := &Results{
		Executable: cmd.Path,
		Args:       cmd.Args[1:],
		ExitCode:   cmd.ProcessState.ExitCode(),
		Stdout:     stdout.String(),
		Stderr:     stderr.String(),
	}

	return result, wrapError(err)
}

// Output descriptions of all supported extractors and exit
//
//   - ExtractorDescriptions maps to cli flags: --extractor-descriptions.
func (c *Command) ExtractorDescriptions(ctx context.Context) (*Results, error) {
	c.addFlag(&Flag{
		ID:   "list_extractor_descriptions",
		Flag: "--extractor-descriptions",
		Args: nil,
	})

	cmd := c.buildCommand(ctx)

	var stdout, stderr bytes.Buffer

	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err := cmd.Run()

	result := &Results{
		Executable: cmd.Path,
		Args:       cmd.Args[1:],
		ExitCode:   cmd.ProcessState.ExitCode(),
		Stdout:     stdout.String(),
		Stderr:     stderr.String(),
	}

	return result, wrapError(err)
}

// Extractor names to use separated by commas. You can also use regexes, "all",
// "default" and "end" (end URL matching); e.g. --ies "holodex.*,end,youtube".
// Prefix the name with a "-" to exclude it, e.g. --ies default,-generic. Use
// --list-extractors for a list of extractor names.
//
//   - See [Command.UnsetUseExtractors], for unsetting the flag.
//   - UseExtractors maps to cli flags: --use-extractors/--ies=NAMES.
func (c *Command) UseExtractors(names string) *Command {
	c.addFlag(&Flag{
		ID:   "allowed_extractors",
		Flag: "--use-extractors",
		Args: []string{names},
	})
	return c
}

// UnsetUseExtractors unsets any flags that were previously set by
// [UseExtractors].
func (c *Command) UnsetUseExtractors() *Command {
	c.removeFlagByID("allowed_extractors")
	return c
}

// ForceGenericExtractor sets the "force-generic-extractor" flag (no description specified).
//
//   - See [Command.UnsetForceGenericExtractor], for unsetting the flag.
//   - ForceGenericExtractor maps to cli flags: --force-generic-extractor (hidden).
func (c *Command) ForceGenericExtractor() *Command {
	c.addFlag(&Flag{
		ID:   "force_generic_extractor",
		Flag: "--force-generic-extractor",
		Args: nil,
	})
	return c
}

// UnsetForceGenericExtractor unsets any flags that were previously set by
// [ForceGenericExtractor].
func (c *Command) UnsetForceGenericExtractor() *Command {
	c.removeFlagByID("force_generic_extractor")
	return c
}

// Use this prefix for unqualified URLs. E.g. "gvsearch2:python" downloads two
// videos from google videos for the search term "python". Use the value "auto" to
// let yt-dlp guess ("auto_warning" to emit a warning when guessing). "error" just
// throws an error. The default value "fixup_error" repairs broken URLs, but emits
// an error if this is not possible instead of searching
//
//   - See [Command.UnsetDefaultSearch], for unsetting the flag.
//   - DefaultSearch maps to cli flags: --default-search=PREFIX.
func (c *Command) DefaultSearch(prefix string) *Command {
	c.addFlag(&Flag{
		ID:   "default_search",
		Flag: "--default-search",
		Args: []string{prefix},
	})
	return c
}

// UnsetDefaultSearch unsets any flags that were previously set by
// [DefaultSearch].
func (c *Command) UnsetDefaultSearch() *Command {
	c.removeFlagByID("default_search")
	return c
}

// Don't load any more configuration files except those given by
// --config-locations. For backward compatibility, if this option is found inside
// the system configuration file, the user configuration is not loaded.
//
//   - See [Command.UnsetIgnoreConfig], for unsetting the flag.
//   - IgnoreConfig maps to cli flags: --ignore-config/--no-config.
func (c *Command) IgnoreConfig() *Command {
	c.addFlag(&Flag{
		ID:   "ignoreconfig",
		Flag: "--ignore-config",
		Args: nil,
	})
	return c
}

// UnsetIgnoreConfig unsets any flags that were previously set by
// [IgnoreConfig].
func (c *Command) UnsetIgnoreConfig() *Command {
	c.removeFlagByID("ignoreconfig")
	return c
}

// Do not load any custom configuration files (default). When given inside a
// configuration file, ignore all previous --config-locations defined in the
// current file
//
//   - See [Command.UnsetConfigLocations], for unsetting the flag.
//   - NoConfigLocations maps to cli flags: --no-config-locations.
func (c *Command) NoConfigLocations() *Command {
	c.addFlag(&Flag{
		ID:   "config_locations",
		Flag: "--no-config-locations",
		Args: nil,
	})
	return c
}

// Location of the main configuration file; either the path to the config or its
// containing directory ("-" for stdin). Can be used multiple times and inside
// other configuration files
//
//   - See [Command.UnsetConfigLocations], for unsetting the flag.
//   - ConfigLocations maps to cli flags: --config-locations=PATH.
func (c *Command) ConfigLocations(path string) *Command {
	c.addFlag(&Flag{
		ID:   "config_locations",
		Flag: "--config-locations",
		Args: []string{path},
	})
	return c
}

// UnsetConfigLocations unsets any flags that were previously set by
// [ConfigLocations].
func (c *Command) UnsetConfigLocations() *Command {
	c.removeFlagByID("config_locations")
	return c
}

// Do not extract the videos of a playlist, only list them
//
//   - See [Command.UnsetFlatPlaylist], for unsetting the flag.
//   - FlatPlaylist maps to cli flags: --flat-playlist.
func (c *Command) FlatPlaylist() *Command {
	c.addFlag(&Flag{
		ID:   "extract_flat",
		Flag: "--flat-playlist",
		Args: nil,
	})
	return c
}

// UnsetFlatPlaylist unsets any flags that were previously set by
// [FlatPlaylist].
func (c *Command) UnsetFlatPlaylist() *Command {
	c.removeFlagByID("extract_flat")
	return c
}

// Fully extract the videos of a playlist (default)
//
//   - See [Command.UnsetFlatPlaylist], for unsetting the flag.
//   - NoFlatPlaylist maps to cli flags: --no-flat-playlist.
func (c *Command) NoFlatPlaylist() *Command {
	c.addFlag(&Flag{
		ID:   "extract_flat",
		Flag: "--no-flat-playlist",
		Args: nil,
	})
	return c
}

// Download livestreams from the start. Currently only supported for YouTube
// (Experimental)
//
//   - See [Command.UnsetLiveFromStart], for unsetting the flag.
//   - LiveFromStart maps to cli flags: --live-from-start.
func (c *Command) LiveFromStart() *Command {
	c.addFlag(&Flag{
		ID:   "live_from_start",
		Flag: "--live-from-start",
		Args: nil,
	})
	return c
}

// UnsetLiveFromStart unsets any flags that were previously set by
// [LiveFromStart].
func (c *Command) UnsetLiveFromStart() *Command {
	c.removeFlagByID("live_from_start")
	return c
}

// Download livestreams from the current time (default)
//
//   - See [Command.UnsetLiveFromStart], for unsetting the flag.
//   - NoLiveFromStart maps to cli flags: --no-live-from-start.
func (c *Command) NoLiveFromStart() *Command {
	c.addFlag(&Flag{
		ID:   "live_from_start",
		Flag: "--no-live-from-start",
		Args: nil,
	})
	return c
}

// Wait for scheduled streams to become available. Pass the minimum number of
// seconds (or range) to wait between retries
//
//   - See [Command.UnsetWaitForVideo], for unsetting the flag.
//   - WaitForVideo maps to cli flags: --wait-for-video=MIN[-MAX].
func (c *Command) WaitForVideo(min string) *Command {
	c.addFlag(&Flag{
		ID:   "wait_for_video",
		Flag: "--wait-for-video",
		Args: []string{min},
	})
	return c
}

// UnsetWaitForVideo unsets any flags that were previously set by
// [WaitForVideo].
func (c *Command) UnsetWaitForVideo() *Command {
	c.removeFlagByID("wait_for_video")
	return c
}

// Do not wait for scheduled streams (default)
//
//   - See [Command.UnsetWaitForVideo], for unsetting the flag.
//   - NoWaitForVideo maps to cli flags: --no-wait-for-video.
func (c *Command) NoWaitForVideo() *Command {
	c.addFlag(&Flag{
		ID:   "wait_for_video",
		Flag: "--no-wait-for-video",
		Args: nil,
	})
	return c
}

// Mark videos watched (even with --simulate)
//
//   - See [Command.UnsetMarkWatched], for unsetting the flag.
//   - MarkWatched maps to cli flags: --mark-watched.
func (c *Command) MarkWatched() *Command {
	c.addFlag(&Flag{
		ID:   "mark_watched",
		Flag: "--mark-watched",
		Args: nil,
	})
	return c
}

// UnsetMarkWatched unsets any flags that were previously set by
// [MarkWatched].
func (c *Command) UnsetMarkWatched() *Command {
	c.removeFlagByID("mark_watched")
	return c
}

// Do not mark videos watched (default)
//
//   - See [Command.UnsetMarkWatched], for unsetting the flag.
//   - NoMarkWatched maps to cli flags: --no-mark-watched.
func (c *Command) NoMarkWatched() *Command {
	c.addFlag(&Flag{
		ID:   "mark_watched",
		Flag: "--no-mark-watched",
		Args: nil,
	})
	return c
}

// NoColors sets the "no-colors" flag (no description specified).
//
//   - See [Command.UnsetColors], for unsetting the flag.
//   - NoColors maps to cli flags: --no-colors/--no-colours (hidden).
func (c *Command) NoColors() *Command {
	c.addFlag(&Flag{
		ID:   "color",
		Flag: "--no-colors",
		Args: nil,
	})
	return c
}

// Whether to emit color codes in output, optionally prefixed by the STREAM (stdout
// or stderr) to apply the setting to. Can be one of "always", "auto" (default),
// "never", or "no_color" (use non color terminal sequences). Can be used multiple
// times
//
//   - See [Command.UnsetColor], for unsetting the flag.
//   - Color maps to cli flags: --color=[STREAM:]POLICY.
func (c *Command) Color(policy string) *Command {
	c.addFlag(&Flag{
		ID:   "color",
		Flag: "--color",
		Args: []string{policy},
	})
	return c
}

// UnsetColor unsets any flags that were previously set by
// [Color].
func (c *Command) UnsetColor() *Command {
	c.removeFlagByID("color")
	return c
}

// Options that can help keep compatibility with youtube-dl or youtube-dlc
// configurations by reverting some of the changes made in yt-dlp. See "Differences
// in default behavior" for details
//
//   - See [Command.UnsetCompatOptions], for unsetting the flag.
//   - CompatOptions maps to cli flags: --compat-options=OPTS.
func (c *Command) CompatOptions(opts string) *Command {
	c.addFlag(&Flag{
		ID:   "compat_opts",
		Flag: "--compat-options",
		Args: []string{opts},
	})
	return c
}

// UnsetCompatOptions unsets any flags that were previously set by
// [CompatOptions].
func (c *Command) UnsetCompatOptions() *Command {
	c.removeFlagByID("compat_opts")
	return c
}
