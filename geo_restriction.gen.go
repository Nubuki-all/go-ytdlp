// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.
//
// Geo-restriction Option Group

package ytdlp

type GeoRestrictionBuilder struct {
	parent *Command
}

type geoVerificationProxyFlag struct {
	args []string
}

var _ Flag = (*geoVerificationProxyFlag)(nil) // ensure geoVerificationProxyFlag implements Flag interface.

func (f *geoVerificationProxyFlag) ID() string {
	return "geo_verification_proxy"
}

func (f *geoVerificationProxyFlag) String() string {
	return "TODO"
}

func (f *geoVerificationProxyFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Use this proxy to verify the IP address for some geo-restricted sites. The
// default proxy specified by --proxy (or none, if the option is not present) is
// used for the actual downloading
//
// GeoVerificationProxy maps to cli flags: --geo-verification-proxy=URL.
func (ff *GeoRestrictionBuilder) GeoVerificationProxy(url string) *GeoRestrictionBuilder {
	ff.parent.addFlag(&geoVerificationProxyFlag{
		args: []string{url},
	})
	return ff
}

type cnVerificationProxyFlag struct {
	args []string
}

var _ Flag = (*cnVerificationProxyFlag)(nil) // ensure cnVerificationProxyFlag implements Flag interface.

func (f *cnVerificationProxyFlag) ID() string {
	return "cn_verification_proxy"
}

func (f *cnVerificationProxyFlag) String() string {
	return "TODO"
}

func (f *cnVerificationProxyFlag) AsFlag() []string {
	return []string{"TODO"}
}

// CnVerificationProxy maps to cli flags: --cn-verification-proxy=URL.
func (ff *GeoRestrictionBuilder) CnVerificationProxy(url string) *GeoRestrictionBuilder {
	ff.parent.addFlag(&cnVerificationProxyFlag{
		args: []string{url},
	})
	return ff
}

type xffFlag struct {
	args []string
}

var _ Flag = (*xffFlag)(nil) // ensure xffFlag implements Flag interface.

func (f *xffFlag) ID() string {
	return "geo_bypass"
}

func (f *xffFlag) String() string {
	return "TODO"
}

func (f *xffFlag) AsFlag() []string {
	return []string{"TODO"}
}

// How to fake X-Forwarded-For HTTP header to try bypassing geographic restriction.
// One of "default" (only when known to be useful), "never", an IP block in CIDR
// notation, or a two-letter ISO 3166-2 country code
//
// Xff maps to cli flags: --xff=VALUE.
func (ff *GeoRestrictionBuilder) Xff(value string) *GeoRestrictionBuilder {
	ff.parent.addFlag(&xffFlag{
		args: []string{value},
	})
	return ff
}

type geoBypassFlag struct {
}

var _ Flag = (*geoBypassFlag)(nil) // ensure geoBypassFlag implements Flag interface.

func (f *geoBypassFlag) ID() string {
	return "geo_bypass"
}

func (f *geoBypassFlag) String() string {
	return "TODO"
}

func (f *geoBypassFlag) AsFlag() []string {
	return []string{"TODO"}
}

type noGeoBypassFlag struct {
}

var _ Flag = (*noGeoBypassFlag)(nil) // ensure noGeoBypassFlag implements Flag interface.

func (f *noGeoBypassFlag) ID() string {
	return "geo_bypass"
}

func (f *noGeoBypassFlag) String() string {
	return "TODO"
}

func (f *noGeoBypassFlag) AsFlag() []string {
	return []string{"TODO"}
}

type geoBypassCountryFlag struct {
	args []string
}

var _ Flag = (*geoBypassCountryFlag)(nil) // ensure geoBypassCountryFlag implements Flag interface.

func (f *geoBypassCountryFlag) ID() string {
	return "geo_bypass"
}

func (f *geoBypassCountryFlag) String() string {
	return "TODO"
}

func (f *geoBypassCountryFlag) AsFlag() []string {
	return []string{"TODO"}
}

// GeoBypassCountry maps to cli flags: --geo-bypass-country=CODE.
func (ff *GeoRestrictionBuilder) GeoBypassCountry(code string) *GeoRestrictionBuilder {
	ff.parent.addFlag(&geoBypassCountryFlag{
		args: []string{code},
	})
	return ff
}

type geoBypassIpBlockFlag struct {
	args []string
}

var _ Flag = (*geoBypassIpBlockFlag)(nil) // ensure geoBypassIpBlockFlag implements Flag interface.

func (f *geoBypassIpBlockFlag) ID() string {
	return "geo_bypass"
}

func (f *geoBypassIpBlockFlag) String() string {
	return "TODO"
}

func (f *geoBypassIpBlockFlag) AsFlag() []string {
	return []string{"TODO"}
}

// GeoBypassIpBlock maps to cli flags: --geo-bypass-ip-block=IP_BLOCK.
func (ff *GeoRestrictionBuilder) GeoBypassIpBlock(ipBlock string) *GeoRestrictionBuilder {
	ff.parent.addFlag(&geoBypassIpBlockFlag{
		args: []string{ipBlock},
	})
	return ff
}
