// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.
//
// Geo-restriction Option Group

package ytdlp

// Use this proxy to verify the IP address for some geo-restricted sites. The
// default proxy specified by --proxy (or none, if the option is not present) is
// used for the actual downloading
//
//   - See [UnsetGeoVerificationProxy], for unsetting the flag.
//   - GeoVerificationProxy maps to cli flags: --geo-verification-proxy=URL.
func (c *Command) GeoVerificationProxy(url string) *Command {
	c.addFlag(&Flag{
		ID:   "geo_verification_proxy",
		Flag: "--geo-verification-proxy",
		Args: []string{url},
	})
	return c
}

// UnsetGeoVerificationProxy unsets any flags that were previously set by
// [GeoVerificationProxy].
func (c *Command) UnsetGeoVerificationProxy() *Command {
	c.removeFlagByID("geo_verification_proxy")
	return c
}

// - See [UnsetCnVerificationProxy], for unsetting the flag.
// - CnVerificationProxy maps to cli flags: --cn-verification-proxy=URL (hidden).
func (c *Command) CnVerificationProxy(url string) *Command {
	c.addFlag(&Flag{
		ID:   "cn_verification_proxy",
		Flag: "--cn-verification-proxy",
		Args: []string{url},
	})
	return c
}

// UnsetCnVerificationProxy unsets any flags that were previously set by
// [CnVerificationProxy].
func (c *Command) UnsetCnVerificationProxy() *Command {
	c.removeFlagByID("cn_verification_proxy")
	return c
}

// How to fake X-Forwarded-For HTTP header to try bypassing geographic restriction.
// One of "default" (only when known to be useful), "never", an IP block in CIDR
// notation, or a two-letter ISO 3166-2 country code
//
//   - See [UnsetXff], for unsetting the flag.
//   - Xff maps to cli flags: --xff=VALUE.
func (c *Command) Xff(value string) *Command {
	c.addFlag(&Flag{
		ID:   "geo_bypass",
		Flag: "--xff",
		Args: []string{value},
	})
	return c
}

// UnsetXff unsets any flags that were previously set by
// [Xff].
func (c *Command) UnsetXff() *Command {
	c.removeFlagByID("geo_bypass")
	return c
}

// - See [UnsetGeoBypassCountry], for unsetting the flag.
// - GeoBypassCountry maps to cli flags: --geo-bypass-country=CODE (hidden).
func (c *Command) GeoBypassCountry(code string) *Command {
	c.addFlag(&Flag{
		ID:   "geo_bypass",
		Flag: "--geo-bypass-country",
		Args: []string{code},
	})
	return c
}

// UnsetGeoBypassCountry unsets any flags that were previously set by
// [GeoBypassCountry].
func (c *Command) UnsetGeoBypassCountry() *Command {
	c.removeFlagByID("geo_bypass")
	return c
}

// - See [UnsetGeoBypassIpBlock], for unsetting the flag.
// - GeoBypassIpBlock maps to cli flags: --geo-bypass-ip-block=IP_BLOCK (hidden).
func (c *Command) GeoBypassIpBlock(ipBlock string) *Command {
	c.addFlag(&Flag{
		ID:   "geo_bypass",
		Flag: "--geo-bypass-ip-block",
		Args: []string{ipBlock},
	})
	return c
}

// UnsetGeoBypassIpBlock unsets any flags that were previously set by
// [GeoBypassIpBlock].
func (c *Command) UnsetGeoBypassIpBlock() *Command {
	c.removeFlagByID("geo_bypass")
	return c
}
