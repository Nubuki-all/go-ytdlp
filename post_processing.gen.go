// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.
//
// Post-Processing Option Group

package ytdlp

// Convert video files to audio-only files (requires ffmpeg and ffprobe)
//
//   - See [UnsetExtractAudio], for unsetting the flag.
//   - ExtractAudio maps to cli flags: -x/--extract-audio.
func (c *Command) ExtractAudio() *Command {
	c.addFlag(&Flag{
		ID:   "extractaudio",
		Flag: "--extract-audio",
		Args: nil,
	})
	return c
}

// UnsetExtractAudio unsets any flags that were previously set by
// [ExtractAudio].
func (c *Command) UnsetExtractAudio() *Command {
	c.removeFlagByID("extractaudio")
	return c
}

// Format to convert the audio to when -x is used. (currently supported: best
// (default), aac, alac, flac, m4a, mp3, opus, vorbis, wav). You can specify
// multiple rules using similar syntax as --remux-video
//
//   - See [UnsetAudioFormat], for unsetting the flag.
//   - AudioFormat maps to cli flags: --audio-format=FORMAT.
func (c *Command) AudioFormat(format string) *Command {
	c.addFlag(&Flag{
		ID:   "audioformat",
		Flag: "--audio-format",
		Args: []string{format},
	})
	return c
}

// UnsetAudioFormat unsets any flags that were previously set by
// [AudioFormat].
func (c *Command) UnsetAudioFormat() *Command {
	c.removeFlagByID("audioformat")
	return c
}

// Specify ffmpeg audio quality to use when converting the audio with -x. Insert a
// value between 0 (best) and 10 (worst) for VBR or a specific bitrate like 128K
// (default 5)
//
//   - See [UnsetAudioQuality], for unsetting the flag.
//   - AudioQuality maps to cli flags: --audio-quality=QUALITY.
func (c *Command) AudioQuality(quality string) *Command {
	c.addFlag(&Flag{
		ID:   "audioquality",
		Flag: "--audio-quality",
		Args: []string{quality},
	})
	return c
}

// UnsetAudioQuality unsets any flags that were previously set by
// [AudioQuality].
func (c *Command) UnsetAudioQuality() *Command {
	c.removeFlagByID("audioquality")
	return c
}

// Remux the video into another container if necessary (currently supported: avi,
// flv, gif, mkv, mov, mp4, webm, aac, aiff, alac, flac, m4a, mka, mp3, ogg, opus,
// vorbis, wav). If target container does not support the video/audio codec,
// remuxing will fail. You can specify multiple rules; e.g. "aac>m4a/mov>mp4/mkv"
// will remux aac to m4a, mov to mp4 and anything else to mkv
//
//   - See [UnsetRemuxVideo], for unsetting the flag.
//   - RemuxVideo maps to cli flags: --remux-video=FORMAT.
func (c *Command) RemuxVideo(format string) *Command {
	c.addFlag(&Flag{
		ID:   "remuxvideo",
		Flag: "--remux-video",
		Args: []string{format},
	})
	return c
}

// UnsetRemuxVideo unsets any flags that were previously set by
// [RemuxVideo].
func (c *Command) UnsetRemuxVideo() *Command {
	c.removeFlagByID("remuxvideo")
	return c
}

// Re-encode the video into another format if necessary. The syntax and supported
// formats are the same as --remux-video
//
//   - See [UnsetRecodeVideo], for unsetting the flag.
//   - RecodeVideo maps to cli flags: --recode-video=FORMAT.
func (c *Command) RecodeVideo(format string) *Command {
	c.addFlag(&Flag{
		ID:   "recodevideo",
		Flag: "--recode-video",
		Args: []string{format},
	})
	return c
}

// UnsetRecodeVideo unsets any flags that were previously set by
// [RecodeVideo].
func (c *Command) UnsetRecodeVideo() *Command {
	c.removeFlagByID("recodevideo")
	return c
}

// Give these arguments to the postprocessors. Specify the postprocessor/executable
// name and the arguments separated by a colon ":" to give the argument to the
// specified postprocessor/executable. Supported PP are: Merger, ModifyChapters,
// SplitChapters, ExtractAudio, VideoRemuxer, VideoConvertor, Metadata,
// EmbedSubtitle, EmbedThumbnail, SubtitlesConvertor, ThumbnailsConvertor,
// FixupStretched, FixupM4a, FixupM3u8, FixupTimestamp and FixupDuration. The
// supported executables are: AtomicParsley, FFmpeg and FFprobe. You can also
// specify "PP+EXE:ARGS" to give the arguments to the specified executable only
// when being used by the specified postprocessor. Additionally, for
// ffmpeg/ffprobe, "_i"/"_o" can be appended to the prefix optionally followed by a
// number to pass the argument before the specified input/output file, e.g. --ppa
// "Merger+ffmpeg_i1:-v quiet". You can use this option multiple times to give
// different arguments to different postprocessors. (Alias: --ppa)
//
//   - See [UnsetPostprocessorArgs], for unsetting the flag.
//   - PostprocessorArgs maps to cli flags: --postprocessor-args/--ppa=NAME:ARGS.
func (c *Command) PostprocessorArgs(nameargs string) *Command {
	c.addFlag(&Flag{
		ID:   "postprocessor_args",
		Flag: "--postprocessor-args",
		Args: []string{nameargs},
	})
	return c
}

// UnsetPostprocessorArgs unsets any flags that were previously set by
// [PostprocessorArgs].
func (c *Command) UnsetPostprocessorArgs() *Command {
	c.removeFlagByID("postprocessor_args")
	return c
}

// Keep the intermediate video file on disk after post-processing
//
//   - See [UnsetKeepVideo], for unsetting the flag.
//   - KeepVideo maps to cli flags: -k/--keep-video.
func (c *Command) KeepVideo() *Command {
	c.addFlag(&Flag{
		ID:   "keepvideo",
		Flag: "--keep-video",
		Args: nil,
	})
	return c
}

// UnsetKeepVideo unsets any flags that were previously set by
// [KeepVideo].
func (c *Command) UnsetKeepVideo() *Command {
	c.removeFlagByID("keepvideo")
	return c
}

// Delete the intermediate video file after post-processing (default)
//
//   - See [UnsetKeepVideo], for unsetting the flag.
//   - NoKeepVideo maps to cli flags: --no-keep-video.
func (c *Command) NoKeepVideo() *Command {
	c.addFlag(&Flag{
		ID:   "keepvideo",
		Flag: "--no-keep-video",
		Args: nil,
	})
	return c
}

// Overwrite post-processed files (default)
//
//   - See [UnsetPostOverwrites], for unsetting the flag.
//   - PostOverwrites maps to cli flags: --post-overwrites.
func (c *Command) PostOverwrites() *Command {
	c.addFlag(&Flag{
		ID:   "nopostoverwrites",
		Flag: "--post-overwrites",
		Args: nil,
	})
	return c
}

// UnsetPostOverwrites unsets any flags that were previously set by
// [PostOverwrites].
func (c *Command) UnsetPostOverwrites() *Command {
	c.removeFlagByID("nopostoverwrites")
	return c
}

// Do not overwrite post-processed files
//
//   - See [UnsetPostOverwrites], for unsetting the flag.
//   - NoPostOverwrites maps to cli flags: --no-post-overwrites.
func (c *Command) NoPostOverwrites() *Command {
	c.addFlag(&Flag{
		ID:   "nopostoverwrites",
		Flag: "--no-post-overwrites",
		Args: nil,
	})
	return c
}

// Embed subtitles in the video (only for mp4, webm and mkv videos)
//
//   - See [UnsetEmbedSubs], for unsetting the flag.
//   - EmbedSubs maps to cli flags: --embed-subs.
func (c *Command) EmbedSubs() *Command {
	c.addFlag(&Flag{
		ID:   "embedsubtitles",
		Flag: "--embed-subs",
		Args: nil,
	})
	return c
}

// UnsetEmbedSubs unsets any flags that were previously set by
// [EmbedSubs].
func (c *Command) UnsetEmbedSubs() *Command {
	c.removeFlagByID("embedsubtitles")
	return c
}

// Do not embed subtitles (default)
//
//   - See [UnsetEmbedSubs], for unsetting the flag.
//   - NoEmbedSubs maps to cli flags: --no-embed-subs.
func (c *Command) NoEmbedSubs() *Command {
	c.addFlag(&Flag{
		ID:   "embedsubtitles",
		Flag: "--no-embed-subs",
		Args: nil,
	})
	return c
}

// Embed thumbnail in the video as cover art
//
//   - See [UnsetEmbedThumbnail], for unsetting the flag.
//   - EmbedThumbnail maps to cli flags: --embed-thumbnail.
func (c *Command) EmbedThumbnail() *Command {
	c.addFlag(&Flag{
		ID:   "embedthumbnail",
		Flag: "--embed-thumbnail",
		Args: nil,
	})
	return c
}

// UnsetEmbedThumbnail unsets any flags that were previously set by
// [EmbedThumbnail].
func (c *Command) UnsetEmbedThumbnail() *Command {
	c.removeFlagByID("embedthumbnail")
	return c
}

// Do not embed thumbnail (default)
//
//   - See [UnsetEmbedThumbnail], for unsetting the flag.
//   - NoEmbedThumbnail maps to cli flags: --no-embed-thumbnail.
func (c *Command) NoEmbedThumbnail() *Command {
	c.addFlag(&Flag{
		ID:   "embedthumbnail",
		Flag: "--no-embed-thumbnail",
		Args: nil,
	})
	return c
}

// Embed metadata to the video file. Also embeds chapters/infojson if present
// unless --no-embed-chapters/--no-embed-info-json are used (Alias: --add-metadata)
//
//   - See [UnsetEmbedMetadata], for unsetting the flag.
//   - EmbedMetadata maps to cli flags: --embed-metadata/--add-metadata.
func (c *Command) EmbedMetadata() *Command {
	c.addFlag(&Flag{
		ID:   "addmetadata",
		Flag: "--embed-metadata",
		Args: nil,
	})
	return c
}

// UnsetEmbedMetadata unsets any flags that were previously set by
// [EmbedMetadata].
func (c *Command) UnsetEmbedMetadata() *Command {
	c.removeFlagByID("addmetadata")
	return c
}

// Do not add metadata to file (default) (Alias: --no-add-metadata)
//
//   - See [UnsetEmbedMetadata], for unsetting the flag.
//   - NoEmbedMetadata maps to cli flags: --no-embed-metadata/--no-add-metadata.
func (c *Command) NoEmbedMetadata() *Command {
	c.addFlag(&Flag{
		ID:   "addmetadata",
		Flag: "--no-embed-metadata",
		Args: nil,
	})
	return c
}

// Add chapter markers to the video file (Alias: --add-chapters)
//
//   - See [UnsetEmbedChapters], for unsetting the flag.
//   - EmbedChapters maps to cli flags: --embed-chapters/--add-chapters.
func (c *Command) EmbedChapters() *Command {
	c.addFlag(&Flag{
		ID:   "addchapters",
		Flag: "--embed-chapters",
		Args: nil,
	})
	return c
}

// UnsetEmbedChapters unsets any flags that were previously set by
// [EmbedChapters].
func (c *Command) UnsetEmbedChapters() *Command {
	c.removeFlagByID("addchapters")
	return c
}

// Do not add chapter markers (default) (Alias: --no-add-chapters)
//
//   - See [UnsetEmbedChapters], for unsetting the flag.
//   - NoEmbedChapters maps to cli flags: --no-embed-chapters/--no-add-chapters.
func (c *Command) NoEmbedChapters() *Command {
	c.addFlag(&Flag{
		ID:   "addchapters",
		Flag: "--no-embed-chapters",
		Args: nil,
	})
	return c
}

// Embed the infojson as an attachment to mkv/mka video files
//
//   - See [UnsetEmbedInfoJson], for unsetting the flag.
//   - EmbedInfoJson maps to cli flags: --embed-info-json.
func (c *Command) EmbedInfoJson() *Command {
	c.addFlag(&Flag{
		ID:   "embed_infojson",
		Flag: "--embed-info-json",
		Args: nil,
	})
	return c
}

// UnsetEmbedInfoJson unsets any flags that were previously set by
// [EmbedInfoJson].
func (c *Command) UnsetEmbedInfoJson() *Command {
	c.removeFlagByID("embed_infojson")
	return c
}

// Do not embed the infojson as an attachment to the video file
//
//   - See [UnsetEmbedInfoJson], for unsetting the flag.
//   - NoEmbedInfoJson maps to cli flags: --no-embed-info-json.
func (c *Command) NoEmbedInfoJson() *Command {
	c.addFlag(&Flag{
		ID:   "embed_infojson",
		Flag: "--no-embed-info-json",
		Args: nil,
	})
	return c
}

// - See [UnsetMetadataFromTitle], for unsetting the flag.
// - MetadataFromTitle maps to cli flags: --metadata-from-title=FORMAT (hidden).
func (c *Command) MetadataFromTitle(format string) *Command {
	c.addFlag(&Flag{
		ID:   "metafromtitle",
		Flag: "--metadata-from-title",
		Args: []string{format},
	})
	return c
}

// UnsetMetadataFromTitle unsets any flags that were previously set by
// [MetadataFromTitle].
func (c *Command) UnsetMetadataFromTitle() *Command {
	c.removeFlagByID("metafromtitle")
	return c
}

// Parse additional metadata like title/artist from other fields; see "MODIFYING
// METADATA" for details. Supported values of "WHEN" are the same as that of
// --use-postprocessor (default: pre_process)
//
//   - See [UnsetParseMetadata], for unsetting the flag.
//   - ParseMetadata maps to cli flags: --parse-metadata=[WHEN:]FROM:TO.
func (c *Command) ParseMetadata(fromto string) *Command {
	c.addFlag(&Flag{
		ID:   "parse_metadata",
		Flag: "--parse-metadata",
		Args: []string{fromto},
	})
	return c
}

// UnsetParseMetadata unsets any flags that were previously set by
// [ParseMetadata].
func (c *Command) UnsetParseMetadata() *Command {
	c.removeFlagByID("parse_metadata")
	return c
}

// Replace text in a metadata field using the given regex. This option can be used
// multiple times. Supported values of "WHEN" are the same as that of
// --use-postprocessor (default: pre_process)
//
//   - See [UnsetReplaceInMetadata], for unsetting the flag.
//   - ReplaceInMetadata maps to cli flags: --replace-in-metadata=[WHEN:]FIELDS REGEX REPLACE.
func (c *Command) ReplaceInMetadata(fields, regex, replace string) *Command {
	c.addFlag(&Flag{
		ID:   "parse_metadata",
		Flag: "--replace-in-metadata",
		Args: []string{fields, regex, replace},
	})
	return c
}

// UnsetReplaceInMetadata unsets any flags that were previously set by
// [ReplaceInMetadata].
func (c *Command) UnsetReplaceInMetadata() *Command {
	c.removeFlagByID("parse_metadata")
	return c
}

// Write metadata to the video file's xattrs (using dublin core and xdg standards)
//
//   - See [UnsetXattrs], for unsetting the flag.
//   - Xattrs maps to cli flags: --xattrs/--xattr.
func (c *Command) Xattrs() *Command {
	c.addFlag(&Flag{
		ID:   "xattrs",
		Flag: "--xattrs",
		Args: nil,
	})
	return c
}

// UnsetXattrs unsets any flags that were previously set by
// [Xattrs].
func (c *Command) UnsetXattrs() *Command {
	c.removeFlagByID("xattrs")
	return c
}

// ConcatPlaylistOption are parameter types for [ConcatPlaylist].
type ConcatPlaylistOption string

var (
	ConcatPlaylistNever      ConcatPlaylistOption = "never"
	ConcatPlaylistAlways     ConcatPlaylistOption = "always"
	ConcatPlaylistMultiVideo ConcatPlaylistOption = "multi_video"
)

// Concatenate videos in a playlist. One of "never", "always", or "multi_video"
// (default; only when the videos form a single show). All the video files must
// have same codecs and number of streams to be concatable. The "pl_video:" prefix
// can be used with "--paths" and "--output" to set the output filename for the
// concatenated files. See "OUTPUT TEMPLATE" for details
//
//   - See [UnsetConcatPlaylist], for unsetting the flag.
//   - ConcatPlaylist maps to cli flags: --concat-playlist=POLICY.
func (c *Command) ConcatPlaylist(policy ConcatPlaylistOption) *Command {
	c.addFlag(&Flag{
		ID:   "concat_playlist",
		Flag: "--concat-playlist",
		Args: []string{string(policy)},
	})
	return c
}

// UnsetConcatPlaylist unsets any flags that were previously set by
// [ConcatPlaylist].
func (c *Command) UnsetConcatPlaylist() *Command {
	c.removeFlagByID("concat_playlist")
	return c
}

// FixupOption are parameter types for [Fixup].
type FixupOption string

var (
	FixupNever        FixupOption = "never"
	FixupIgnore       FixupOption = "ignore"
	FixupWarn         FixupOption = "warn"
	FixupDetectOrWarn FixupOption = "detect_or_warn"
	FixupForce        FixupOption = "force"
)

// Automatically correct known faults of the file. One of never (do nothing), warn
// (only emit a warning), detect_or_warn (the default; fix file if we can, warn
// otherwise), force (try fixing even if file already exists)
//
//   - See [UnsetFixup], for unsetting the flag.
//   - Fixup maps to cli flags: --fixup=POLICY.
func (c *Command) Fixup(policy FixupOption) *Command {
	c.addFlag(&Flag{
		ID:   "fixup",
		Flag: "--fixup",
		Args: []string{string(policy)},
	})
	return c
}

// UnsetFixup unsets any flags that were previously set by
// [Fixup].
func (c *Command) UnsetFixup() *Command {
	c.removeFlagByID("fixup")
	return c
}

// PreferAvconv sets the "prefer-avconv" flag (no description specified).
//
//   - See [UnsetPreferAvconv], for unsetting the flag.
//   - PreferAvconv maps to cli flags: --prefer-avconv/--no-prefer-ffmpeg (hidden).
func (c *Command) PreferAvconv() *Command {
	c.addFlag(&Flag{
		ID:   "prefer_ffmpeg",
		Flag: "--prefer-avconv",
		Args: nil,
	})
	return c
}

// UnsetPreferAvconv unsets any flags that were previously set by
// [PreferAvconv].
func (c *Command) UnsetPreferAvconv() *Command {
	c.removeFlagByID("prefer_ffmpeg")
	return c
}

// PreferFfmpeg sets the "prefer-ffmpeg" flag (no description specified).
//
//   - See [UnsetPreferFfmpeg], for unsetting the flag.
//   - PreferFfmpeg maps to cli flags: --prefer-ffmpeg/--no-prefer-avconv (hidden).
func (c *Command) PreferFfmpeg() *Command {
	c.addFlag(&Flag{
		ID:   "prefer_ffmpeg",
		Flag: "--prefer-ffmpeg",
		Args: nil,
	})
	return c
}

// UnsetPreferFfmpeg unsets any flags that were previously set by
// [PreferFfmpeg].
func (c *Command) UnsetPreferFfmpeg() *Command {
	c.removeFlagByID("prefer_ffmpeg")
	return c
}

// Location of the ffmpeg binary; either the path to the binary or its containing
// directory
//
//   - See [UnsetFfmpegLocation], for unsetting the flag.
//   - FfmpegLocation maps to cli flags: --ffmpeg-location/--avconv-location=PATH.
func (c *Command) FfmpegLocation(path string) *Command {
	c.addFlag(&Flag{
		ID:   "ffmpeg_location",
		Flag: "--ffmpeg-location",
		Args: []string{path},
	})
	return c
}

// UnsetFfmpegLocation unsets any flags that were previously set by
// [FfmpegLocation].
func (c *Command) UnsetFfmpegLocation() *Command {
	c.removeFlagByID("ffmpeg_location")
	return c
}

// Execute a command, optionally prefixed with when to execute it, separated by a
// ":". Supported values of "WHEN" are the same as that of --use-postprocessor
// (default: after_move). Same syntax as the output template can be used to pass
// any field as arguments to the command. If no fields are passed,
// %(filepath,_filename|)q is appended to the end of the command. This option can
// be used multiple times
//
//   - See [UnsetExec], for unsetting the flag.
//   - Exec maps to cli flags: --exec=[WHEN:]CMD.
func (c *Command) Exec(cmd string) *Command {
	c.addFlag(&Flag{
		ID:   "exec_cmd",
		Flag: "--exec",
		Args: []string{cmd},
	})
	return c
}

// UnsetExec unsets any flags that were previously set by
// [Exec].
func (c *Command) UnsetExec() *Command {
	c.removeFlagByID("exec_cmd")
	return c
}

// Remove any previously defined --exec
//
//   - See [UnsetExec], for unsetting the flag.
//   - NoExec maps to cli flags: --no-exec.
func (c *Command) NoExec() *Command {
	c.addFlag(&Flag{
		ID:   "exec_cmd",
		Flag: "--no-exec",
		Args: nil,
	})
	return c
}

// - See [UnsetExecBeforeDownload], for unsetting the flag.
// - ExecBeforeDownload maps to cli flags: --exec-before-download=CMD (hidden).
func (c *Command) ExecBeforeDownload(cmd string) *Command {
	c.addFlag(&Flag{
		ID:   "exec_before_dl_cmd",
		Flag: "--exec-before-download",
		Args: []string{cmd},
	})
	return c
}

// UnsetExecBeforeDownload unsets any flags that were previously set by
// [ExecBeforeDownload].
func (c *Command) UnsetExecBeforeDownload() *Command {
	c.removeFlagByID("exec_before_dl_cmd")
	return c
}

// NoExecBeforeDownload sets the "no-exec-before-download" flag (no description specified).
//
//   - See [UnsetExecBeforeDownload], for unsetting the flag.
//   - NoExecBeforeDownload maps to cli flags: --no-exec-before-download (hidden).
func (c *Command) NoExecBeforeDownload() *Command {
	c.addFlag(&Flag{
		ID:   "exec_before_dl_cmd",
		Flag: "--no-exec-before-download",
		Args: nil,
	})
	return c
}

// Convert the subtitles to another format (currently supported: ass, lrc, srt,
// vtt) (Alias: --convert-subtitles)
//
//   - See [UnsetConvertSubs], for unsetting the flag.
//   - ConvertSubs maps to cli flags: --convert-subs/--convert-sub/--convert-subtitles=FORMAT.
func (c *Command) ConvertSubs(format string) *Command {
	c.addFlag(&Flag{
		ID:   "convertsubtitles",
		Flag: "--convert-subs",
		Args: []string{format},
	})
	return c
}

// UnsetConvertSubs unsets any flags that were previously set by
// [ConvertSubs].
func (c *Command) UnsetConvertSubs() *Command {
	c.removeFlagByID("convertsubtitles")
	return c
}

// Convert the thumbnails to another format (currently supported: jpg, png, webp).
// You can specify multiple rules using similar syntax as --remux-video
//
//   - See [UnsetConvertThumbnails], for unsetting the flag.
//   - ConvertThumbnails maps to cli flags: --convert-thumbnails=FORMAT.
func (c *Command) ConvertThumbnails(format string) *Command {
	c.addFlag(&Flag{
		ID:   "convertthumbnails",
		Flag: "--convert-thumbnails",
		Args: []string{format},
	})
	return c
}

// UnsetConvertThumbnails unsets any flags that were previously set by
// [ConvertThumbnails].
func (c *Command) UnsetConvertThumbnails() *Command {
	c.removeFlagByID("convertthumbnails")
	return c
}

// Split video into multiple files based on internal chapters. The "chapter:"
// prefix can be used with "--paths" and "--output" to set the output filename for
// the split files. See "OUTPUT TEMPLATE" for details
//
//   - See [UnsetSplitChapters], for unsetting the flag.
//   - SplitChapters maps to cli flags: --split-chapters/--split-tracks.
func (c *Command) SplitChapters() *Command {
	c.addFlag(&Flag{
		ID:   "split_chapters",
		Flag: "--split-chapters",
		Args: nil,
	})
	return c
}

// UnsetSplitChapters unsets any flags that were previously set by
// [SplitChapters].
func (c *Command) UnsetSplitChapters() *Command {
	c.removeFlagByID("split_chapters")
	return c
}

// Do not split video based on chapters (default)
//
//   - See [UnsetSplitChapters], for unsetting the flag.
//   - NoSplitChapters maps to cli flags: --no-split-chapters/--no-split-tracks.
func (c *Command) NoSplitChapters() *Command {
	c.addFlag(&Flag{
		ID:   "split_chapters",
		Flag: "--no-split-chapters",
		Args: nil,
	})
	return c
}

// Remove chapters whose title matches the given regular expression. The syntax is
// the same as --download-sections. This option can be used multiple times
//
//   - See [UnsetRemoveChapters], for unsetting the flag.
//   - RemoveChapters maps to cli flags: --remove-chapters=REGEX.
func (c *Command) RemoveChapters(regex string) *Command {
	c.addFlag(&Flag{
		ID:   "remove_chapters",
		Flag: "--remove-chapters",
		Args: []string{regex},
	})
	return c
}

// UnsetRemoveChapters unsets any flags that were previously set by
// [RemoveChapters].
func (c *Command) UnsetRemoveChapters() *Command {
	c.removeFlagByID("remove_chapters")
	return c
}

// Do not remove any chapters from the file (default)
//
//   - See [UnsetRemoveChapters], for unsetting the flag.
//   - NoRemoveChapters maps to cli flags: --no-remove-chapters.
func (c *Command) NoRemoveChapters() *Command {
	c.addFlag(&Flag{
		ID:   "remove_chapters",
		Flag: "--no-remove-chapters",
		Args: nil,
	})
	return c
}

// Force keyframes at cuts when downloading/splitting/removing sections. This is
// slow due to needing a re-encode, but the resulting video may have fewer
// artifacts around the cuts
//
//   - See [UnsetForceKeyframesAtCuts], for unsetting the flag.
//   - ForceKeyframesAtCuts maps to cli flags: --force-keyframes-at-cuts.
func (c *Command) ForceKeyframesAtCuts() *Command {
	c.addFlag(&Flag{
		ID:   "force_keyframes_at_cuts",
		Flag: "--force-keyframes-at-cuts",
		Args: nil,
	})
	return c
}

// UnsetForceKeyframesAtCuts unsets any flags that were previously set by
// [ForceKeyframesAtCuts].
func (c *Command) UnsetForceKeyframesAtCuts() *Command {
	c.removeFlagByID("force_keyframes_at_cuts")
	return c
}

// Do not force keyframes around the chapters when cutting/splitting (default)
//
//   - See [UnsetForceKeyframesAtCuts], for unsetting the flag.
//   - NoForceKeyframesAtCuts maps to cli flags: --no-force-keyframes-at-cuts.
func (c *Command) NoForceKeyframesAtCuts() *Command {
	c.addFlag(&Flag{
		ID:   "force_keyframes_at_cuts",
		Flag: "--no-force-keyframes-at-cuts",
		Args: nil,
	})
	return c
}

// The (case sensitive) name of plugin postprocessors to be enabled, and
// (optionally) arguments to be passed to it, separated by a colon ":". ARGS are a
// semicolon ";" delimited list of NAME=VALUE. The "when" argument determines when
// the postprocessor is invoked. It can be one of "pre_process" (after video
// extraction), "after_filter" (after video passes filter), "video" (after
// --format; before --print/--output), "before_dl" (before each video download),
// "post_process" (after each video download; default), "after_move" (after moving
// video file to it's final locations), "after_video" (after downloading and
// processing all formats of a video), or "playlist" (at end of playlist). This
// option can be used multiple times to add different postprocessors
//
//   - See [UnsetUsePostprocessor], for unsetting the flag.
//   - UsePostprocessor maps to cli flags: --use-postprocessor=NAME[:ARGS].
func (c *Command) UsePostprocessor(name string) *Command {
	c.addFlag(&Flag{
		ID:   "add_postprocessors",
		Flag: "--use-postprocessor",
		Args: []string{name},
	})
	return c
}

// UnsetUsePostprocessor unsets any flags that were previously set by
// [UsePostprocessor].
func (c *Command) UnsetUsePostprocessor() *Command {
	c.removeFlagByID("add_postprocessors")
	return c
}
