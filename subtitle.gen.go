// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.
//
// Subtitle Option Group

package ytdlp

type SubtitleBuilder struct {
	parent *Command
}

// Then jumps back to the base command builder, if you want to add additional flags
// from another flag builder.
func (ff *SubtitleBuilder) Then() *Command {
	return ff.parent
}

// Write subtitle file
//
// WriteSubs maps to cli flags: --write-subs/--write-srt.
func (ff *SubtitleBuilder) WriteSubs() *SubtitleBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "writesubtitles",
		Flag: "--write-subs",
		Args: nil,
	})
	return ff
}

// Do not write subtitle file (default)
//
// NoWriteSubs maps to cli flags: --no-write-subs/--no-write-srt.
func (ff *SubtitleBuilder) NoWriteSubs() *SubtitleBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "writesubtitles",
		Flag: "--no-write-subs",
		Args: nil,
	})
	return ff
}

// Write automatically generated subtitle file (Alias: --write-automatic-subs)
//
// WriteAutoSubs maps to cli flags: --write-auto-subs/--write-automatic-subs.
func (ff *SubtitleBuilder) WriteAutoSubs() *SubtitleBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "writeautomaticsub",
		Flag: "--write-auto-subs",
		Args: nil,
	})
	return ff
}

// Do not write auto-generated subtitles (default) (Alias:
// --no-write-automatic-subs)
//
// NoWriteAutoSubs maps to cli flags: --no-write-auto-subs/--no-write-automatic-subs.
func (ff *SubtitleBuilder) NoWriteAutoSubs() *SubtitleBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "writeautomaticsub",
		Flag: "--no-write-auto-subs",
		Args: nil,
	})
	return ff
}

// AllSubs sets the "all-subs" flag to "true".
//
// AllSubs maps to cli flags: --all-subs.
func (ff *SubtitleBuilder) AllSubs() *SubtitleBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "allsubtitles",
		Flag: "--all-subs",
		Args: nil,
	})
	return ff
}

// List available subtitles of each video. Simulate unless --no-simulate is used
//
// ListSubs maps to cli flags: --list-subs.
func (ff *SubtitleBuilder) ListSubs() *SubtitleBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "listsubtitles",
		Flag: "--list-subs",
		Args: nil,
	})
	return ff
}

// Subtitle format; accepts formats preference, e.g. "srt" or "ass/srt/best"
//
// SubFormat maps to cli flags: --sub-format=FORMAT.
func (ff *SubtitleBuilder) SubFormat(format string) *SubtitleBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "subtitlesformat",
		Flag: "--sub-format",
		Args: []string{format},
	})
	return ff
}
