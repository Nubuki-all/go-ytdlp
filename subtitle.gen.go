// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.
//
// Subtitle Option Group

package ytdlp

type SubtitleBuilder struct {
	parent *Command
}

type writeSubsFlag struct {
}

var _ Flag = (*writeSubsFlag)(nil) // ensure writeSubsFlag implements Flag interface.

func (f *writeSubsFlag) ID() string {
	return "writesubtitles"
}

func (f *writeSubsFlag) String() string {
	return "TODO"
}

func (f *writeSubsFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Write subtitle file
//
// WriteSubs maps to cli flags: --write-subs/--write-srt.
func (ff *SubtitleBuilder) WriteSubs() *SubtitleBuilder {
	ff.parent.addFlag(&writeSubsFlag{})
	return ff
}

type noWriteSubsFlag struct {
}

var _ Flag = (*noWriteSubsFlag)(nil) // ensure noWriteSubsFlag implements Flag interface.

func (f *noWriteSubsFlag) ID() string {
	return "writesubtitles"
}

func (f *noWriteSubsFlag) String() string {
	return "TODO"
}

func (f *noWriteSubsFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Do not write subtitle file (default)
//
// NoWriteSubs maps to cli flags: --no-write-subs/--no-write-srt.
func (ff *SubtitleBuilder) NoWriteSubs() *SubtitleBuilder {
	ff.parent.addFlag(&noWriteSubsFlag{})
	return ff
}

type writeAutoSubsFlag struct {
}

var _ Flag = (*writeAutoSubsFlag)(nil) // ensure writeAutoSubsFlag implements Flag interface.

func (f *writeAutoSubsFlag) ID() string {
	return "writeautomaticsub"
}

func (f *writeAutoSubsFlag) String() string {
	return "TODO"
}

func (f *writeAutoSubsFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Write automatically generated subtitle file (Alias: --write-automatic-subs)
//
// WriteAutoSubs maps to cli flags: --write-auto-subs/--write-automatic-subs.
func (ff *SubtitleBuilder) WriteAutoSubs() *SubtitleBuilder {
	ff.parent.addFlag(&writeAutoSubsFlag{})
	return ff
}

type noWriteAutoSubsFlag struct {
}

var _ Flag = (*noWriteAutoSubsFlag)(nil) // ensure noWriteAutoSubsFlag implements Flag interface.

func (f *noWriteAutoSubsFlag) ID() string {
	return "writeautomaticsub"
}

func (f *noWriteAutoSubsFlag) String() string {
	return "TODO"
}

func (f *noWriteAutoSubsFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Do not write auto-generated subtitles (default) (Alias:
// --no-write-automatic-subs)
//
// NoWriteAutoSubs maps to cli flags: --no-write-auto-subs/--no-write-automatic-subs.
func (ff *SubtitleBuilder) NoWriteAutoSubs() *SubtitleBuilder {
	ff.parent.addFlag(&noWriteAutoSubsFlag{})
	return ff
}

type allSubsFlag struct {
}

var _ Flag = (*allSubsFlag)(nil) // ensure allSubsFlag implements Flag interface.

func (f *allSubsFlag) ID() string {
	return "allsubtitles"
}

func (f *allSubsFlag) String() string {
	return "TODO"
}

func (f *allSubsFlag) AsFlag() []string {
	return []string{"TODO"}
}

// AllSubs sets the "all-subs" flag to "true".
//
// AllSubs maps to cli flags: --all-subs.
func (ff *SubtitleBuilder) AllSubs() *SubtitleBuilder {
	ff.parent.addFlag(&allSubsFlag{})
	return ff
}

type listSubsFlag struct {
}

var _ Flag = (*listSubsFlag)(nil) // ensure listSubsFlag implements Flag interface.

func (f *listSubsFlag) ID() string {
	return "listsubtitles"
}

func (f *listSubsFlag) String() string {
	return "TODO"
}

func (f *listSubsFlag) AsFlag() []string {
	return []string{"TODO"}
}

// List available subtitles of each video. Simulate unless --no-simulate is used
//
// ListSubs maps to cli flags: --list-subs.
func (ff *SubtitleBuilder) ListSubs() *SubtitleBuilder {
	ff.parent.addFlag(&listSubsFlag{})
	return ff
}

type subFormatFlag struct {
	args []string
}

var _ Flag = (*subFormatFlag)(nil) // ensure subFormatFlag implements Flag interface.

func (f *subFormatFlag) ID() string {
	return "subtitlesformat"
}

func (f *subFormatFlag) String() string {
	return "TODO"
}

func (f *subFormatFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Subtitle format; accepts formats preference, e.g. "srt" or "ass/srt/best"
//
// SubFormat maps to cli flags: --sub-format=FORMAT.
func (ff *SubtitleBuilder) SubFormat(format string) *SubtitleBuilder {
	ff.parent.addFlag(&subFormatFlag{
		args: []string{format},
	})
	return ff
}
