// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.
//
// Verbosity Simulation Option Group

package ytdlp

type VerbositySimulationBuilder struct {
	parent *Command
}

// Then jumps back to the base command builder, if you want to add additional flags
// from another flag builder.
func (ff *VerbositySimulationBuilder) Then() *Command {
	return ff.parent
}

// Activate quiet mode. If used with --verbose, print the log to stderr
//
// Quiet maps to cli flags: -q/--quiet.
func (ff *VerbositySimulationBuilder) Quiet() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "quiet",
		Flag: "--quiet",
		Args: nil,
	})
	return ff
}

// Deactivate quiet mode. (Default)
//
// NoQuiet maps to cli flags: --no-quiet.
func (ff *VerbositySimulationBuilder) NoQuiet() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "quiet",
		Flag: "--no-quiet",
		Args: nil,
	})
	return ff
}

// Ignore warnings
//
// NoWarnings maps to cli flags: --no-warnings.
func (ff *VerbositySimulationBuilder) NoWarnings() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "no_warnings",
		Flag: "--no-warnings",
		Args: nil,
	})
	return ff
}

// Do not download the video and do not write anything to disk
//
// Simulate maps to cli flags: -s/--simulate.
func (ff *VerbositySimulationBuilder) Simulate() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "simulate",
		Flag: "--simulate",
		Args: nil,
	})
	return ff
}

// Download the video even if printing/listing options are used
//
// NoSimulate maps to cli flags: --no-simulate.
func (ff *VerbositySimulationBuilder) NoSimulate() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "simulate",
		Flag: "--no-simulate",
		Args: nil,
	})
	return ff
}

// Ignore "No video formats" error. Useful for extracting metadata even if the
// videos are not actually available for download (experimental)
//
// IgnoreNoFormatsError maps to cli flags: --ignore-no-formats-error.
func (ff *VerbositySimulationBuilder) IgnoreNoFormatsError() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "ignore_no_formats_error",
		Flag: "--ignore-no-formats-error",
		Args: nil,
	})
	return ff
}

// Throw error when no downloadable video formats are found (default)
//
// NoIgnoreNoFormatsError maps to cli flags: --no-ignore-no-formats-error.
func (ff *VerbositySimulationBuilder) NoIgnoreNoFormatsError() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "ignore_no_formats_error",
		Flag: "--no-ignore-no-formats-error",
		Args: nil,
	})
	return ff
}

// Do not download the video but write all related files (Alias: --no-download)
//
// SkipDownload maps to cli flags: --skip-download/--no-download.
func (ff *VerbositySimulationBuilder) SkipDownload() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "skip_download",
		Flag: "--skip-download",
		Args: nil,
	})
	return ff
}

// GetUrl sets the "get-url" flag to "true".
//
// GetUrl maps to cli flags: -g/--get-url.
func (ff *VerbositySimulationBuilder) GetUrl() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "geturl",
		Flag: "--get-url",
		Args: nil,
	})
	return ff
}

// GetTitle sets the "get-title" flag to "true".
//
// GetTitle maps to cli flags: -e/--get-title.
func (ff *VerbositySimulationBuilder) GetTitle() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "gettitle",
		Flag: "--get-title",
		Args: nil,
	})
	return ff
}

// GetId sets the "get-id" flag to "true".
//
// GetId maps to cli flags: --get-id.
func (ff *VerbositySimulationBuilder) GetId() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "getid",
		Flag: "--get-id",
		Args: nil,
	})
	return ff
}

// GetThumbnail sets the "get-thumbnail" flag to "true".
//
// GetThumbnail maps to cli flags: --get-thumbnail.
func (ff *VerbositySimulationBuilder) GetThumbnail() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "getthumbnail",
		Flag: "--get-thumbnail",
		Args: nil,
	})
	return ff
}

// GetDescription sets the "get-description" flag to "true".
//
// GetDescription maps to cli flags: --get-description.
func (ff *VerbositySimulationBuilder) GetDescription() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "getdescription",
		Flag: "--get-description",
		Args: nil,
	})
	return ff
}

// GetDuration sets the "get-duration" flag to "true".
//
// GetDuration maps to cli flags: --get-duration.
func (ff *VerbositySimulationBuilder) GetDuration() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "getduration",
		Flag: "--get-duration",
		Args: nil,
	})
	return ff
}

// GetFilename sets the "get-filename" flag to "true".
//
// GetFilename maps to cli flags: --get-filename.
func (ff *VerbositySimulationBuilder) GetFilename() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "getfilename",
		Flag: "--get-filename",
		Args: nil,
	})
	return ff
}

// GetFormat sets the "get-format" flag to "true".
//
// GetFormat maps to cli flags: --get-format.
func (ff *VerbositySimulationBuilder) GetFormat() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "getformat",
		Flag: "--get-format",
		Args: nil,
	})
	return ff
}

// Quiet, but print JSON information for each video. Simulate unless --no-simulate
// is used. See "OUTPUT TEMPLATE" for a description of available keys
//
// DumpJson maps to cli flags: -j/--dump-json.
func (ff *VerbositySimulationBuilder) DumpJson() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "dumpjson",
		Flag: "--dump-json",
		Args: nil,
	})
	return ff
}

// Quiet, but print JSON information for each url or infojson passed. Simulate
// unless --no-simulate is used. If the URL refers to a playlist, the whole
// playlist information is dumped in a single line
//
// DumpSingleJson maps to cli flags: -J/--dump-single-json.
func (ff *VerbositySimulationBuilder) DumpSingleJson() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "dump_single_json",
		Flag: "--dump-single-json",
		Args: nil,
	})
	return ff
}

// Force download archive entries to be written as far as no errors occur, even if
// -s or another simulation option is used (Alias: --force-download-archive)
//
// ForceWriteArchive maps to cli flags: --force-write-archive/--force-write-download-archive/--force-download-archive.
func (ff *VerbositySimulationBuilder) ForceWriteArchive() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "force_write_download_archive",
		Flag: "--force-write-archive",
		Args: nil,
	})
	return ff
}

// Output progress bar as new lines
//
// Newline maps to cli flags: --newline.
func (ff *VerbositySimulationBuilder) Newline() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "progress_with_newline",
		Flag: "--newline",
		Args: nil,
	})
	return ff
}

// Do not print progress bar
//
// NoProgress maps to cli flags: --no-progress.
func (ff *VerbositySimulationBuilder) NoProgress() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "noprogress",
		Flag: "--no-progress",
		Args: nil,
	})
	return ff
}

// Show progress bar, even if in quiet mode
//
// Progress maps to cli flags: --progress.
func (ff *VerbositySimulationBuilder) Progress() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "noprogress",
		Flag: "--progress",
		Args: nil,
	})
	return ff
}

// Display progress in console titlebar
//
// ConsoleTitle maps to cli flags: --console-title.
func (ff *VerbositySimulationBuilder) ConsoleTitle() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "consoletitle",
		Flag: "--console-title",
		Args: nil,
	})
	return ff
}

// Print various debugging information
//
// Verbose maps to cli flags: -v/--verbose.
func (ff *VerbositySimulationBuilder) Verbose() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "verbose",
		Flag: "--verbose",
		Args: nil,
	})
	return ff
}

// Print downloaded pages encoded using base64 to debug problems (very verbose)
//
// DumpPages maps to cli flags: --dump-pages/--dump-intermediate-pages.
func (ff *VerbositySimulationBuilder) DumpPages() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "dump_intermediate_pages",
		Flag: "--dump-pages",
		Args: nil,
	})
	return ff
}

// Write downloaded intermediary pages to files in the current directory to debug
// problems
//
// WritePages maps to cli flags: --write-pages.
func (ff *VerbositySimulationBuilder) WritePages() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "write_pages",
		Flag: "--write-pages",
		Args: nil,
	})
	return ff
}

// LoadPages sets the "load-pages" flag to "true".
//
// LoadPages maps to cli flags: --load-pages.
func (ff *VerbositySimulationBuilder) LoadPages() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "load_pages",
		Flag: "--load-pages",
		Args: nil,
	})
	return ff
}

// YoutubePrintSigCode sets the "youtube-print-sig-code" flag to "true".
//
// YoutubePrintSigCode maps to cli flags: --youtube-print-sig-code.
func (ff *VerbositySimulationBuilder) YoutubePrintSigCode() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "youtube_print_sig_code",
		Flag: "--youtube-print-sig-code",
		Args: nil,
	})
	return ff
}

// Display sent and read HTTP traffic
//
// PrintTraffic maps to cli flags: --print-traffic/--dump-headers.
func (ff *VerbositySimulationBuilder) PrintTraffic() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "debug_printtraffic",
		Flag: "--print-traffic",
		Args: nil,
	})
	return ff
}

// CallHome sets the "call-home" flag to "true".
//
// CallHome maps to cli flags: -C/--call-home.
func (ff *VerbositySimulationBuilder) CallHome() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "call_home",
		Flag: "--call-home",
		Args: nil,
	})
	return ff
}

// NoCallHome sets the "no-call-home" flag to "false".
//
// NoCallHome maps to cli flags: --no-call-home.
func (ff *VerbositySimulationBuilder) NoCallHome() *VerbositySimulationBuilder {
	ff.parent.addFlag(&Flag{
		ID:   "call_home",
		Flag: "--no-call-home",
		Args: nil,
	})
	return ff
}
