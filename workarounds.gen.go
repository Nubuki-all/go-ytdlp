// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// Code generated by cmd/codegen. DO NOT EDIT.
//
// Workarounds Option Group

package ytdlp

type WorkaroundBuilder struct {
	parent *Command
}

type encodingFlag struct {
	args []string
}

var _ Flag = (*encodingFlag)(nil) // ensure encodingFlag implements Flag interface.

func (f *encodingFlag) ID() string {
	return "encoding"
}

func (f *encodingFlag) String() string {
	return "TODO"
}

func (f *encodingFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Force the specified encoding (experimental)
//
// Encoding maps to cli flags: --encoding=ENCODING.
func (ff *WorkaroundBuilder) Encoding(encoding string) *WorkaroundBuilder {
	ff.parent.addFlag(&encodingFlag{
		args: []string{encoding},
	})
	return ff
}

type legacyServerConnectFlag struct {
}

var _ Flag = (*legacyServerConnectFlag)(nil) // ensure legacyServerConnectFlag implements Flag interface.

func (f *legacyServerConnectFlag) ID() string {
	return "legacy_server_connect"
}

func (f *legacyServerConnectFlag) String() string {
	return "TODO"
}

func (f *legacyServerConnectFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Explicitly allow HTTPS connection to servers that do not support RFC 5746 secure
// renegotiation
//
// LegacyServerConnect maps to cli flags: --legacy-server-connect.
func (ff *WorkaroundBuilder) LegacyServerConnect() *WorkaroundBuilder {
	ff.parent.addFlag(&legacyServerConnectFlag{})
	return ff
}

type noCheckCertificatesFlag struct {
}

var _ Flag = (*noCheckCertificatesFlag)(nil) // ensure noCheckCertificatesFlag implements Flag interface.

func (f *noCheckCertificatesFlag) ID() string {
	return "no_check_certificate"
}

func (f *noCheckCertificatesFlag) String() string {
	return "TODO"
}

func (f *noCheckCertificatesFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Suppress HTTPS certificate validation
//
// NoCheckCertificates maps to cli flags: --no-check-certificates.
func (ff *WorkaroundBuilder) NoCheckCertificates() *WorkaroundBuilder {
	ff.parent.addFlag(&noCheckCertificatesFlag{})
	return ff
}

type preferInsecureFlag struct {
}

var _ Flag = (*preferInsecureFlag)(nil) // ensure preferInsecureFlag implements Flag interface.

func (f *preferInsecureFlag) ID() string {
	return "prefer_insecure"
}

func (f *preferInsecureFlag) String() string {
	return "TODO"
}

func (f *preferInsecureFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Use an unencrypted connection to retrieve information about the video (Currently
// supported only for YouTube)
//
// PreferInsecure maps to cli flags: --prefer-insecure/--prefer-unsecure.
func (ff *WorkaroundBuilder) PreferInsecure() *WorkaroundBuilder {
	ff.parent.addFlag(&preferInsecureFlag{})
	return ff
}

type userAgentFlag struct {
	args []string
}

var _ Flag = (*userAgentFlag)(nil) // ensure userAgentFlag implements Flag interface.

func (f *userAgentFlag) ID() string {
	return "user_agent"
}

func (f *userAgentFlag) String() string {
	return "TODO"
}

func (f *userAgentFlag) AsFlag() []string {
	return []string{"TODO"}
}

// UserAgent maps to cli flags: --user-agent=UA.
func (ff *WorkaroundBuilder) UserAgent(ua string) *WorkaroundBuilder {
	ff.parent.addFlag(&userAgentFlag{
		args: []string{ua},
	})
	return ff
}

type refererFlag struct {
	args []string
}

var _ Flag = (*refererFlag)(nil) // ensure refererFlag implements Flag interface.

func (f *refererFlag) ID() string {
	return "referer"
}

func (f *refererFlag) String() string {
	return "TODO"
}

func (f *refererFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Referer maps to cli flags: --referer=URL.
func (ff *WorkaroundBuilder) Referer(url string) *WorkaroundBuilder {
	ff.parent.addFlag(&refererFlag{
		args: []string{url},
	})
	return ff
}

type bidiWorkaroundFlag struct {
}

var _ Flag = (*bidiWorkaroundFlag)(nil) // ensure bidiWorkaroundFlag implements Flag interface.

func (f *bidiWorkaroundFlag) ID() string {
	return "bidi_workaround"
}

func (f *bidiWorkaroundFlag) String() string {
	return "TODO"
}

func (f *bidiWorkaroundFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Work around terminals that lack bidirectional text support. Requires bidiv or
// fribidi executable in PATH
//
// BidiWorkaround maps to cli flags: --bidi-workaround.
func (ff *WorkaroundBuilder) BidiWorkaround() *WorkaroundBuilder {
	ff.parent.addFlag(&bidiWorkaroundFlag{})
	return ff
}

type sleepRequestsFlag struct {
	args []float64
}

var _ Flag = (*sleepRequestsFlag)(nil) // ensure sleepRequestsFlag implements Flag interface.

func (f *sleepRequestsFlag) ID() string {
	return "sleep_interval_requests"
}

func (f *sleepRequestsFlag) String() string {
	return "TODO"
}

func (f *sleepRequestsFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Number of seconds to sleep between requests during data extraction
//
// SleepRequests maps to cli flags: --sleep-requests=SECONDS.
func (ff *WorkaroundBuilder) SleepRequests(seconds float64) *WorkaroundBuilder {
	ff.parent.addFlag(&sleepRequestsFlag{
		args: []float64{seconds},
	})
	return ff
}

type sleepIntervalFlag struct {
	args []float64
}

var _ Flag = (*sleepIntervalFlag)(nil) // ensure sleepIntervalFlag implements Flag interface.

func (f *sleepIntervalFlag) ID() string {
	return "sleep_interval"
}

func (f *sleepIntervalFlag) String() string {
	return "TODO"
}

func (f *sleepIntervalFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Number of seconds to sleep before each download. This is the minimum time to
// sleep when used along with --max-sleep-interval (Alias: --min-sleep-interval)
//
// SleepInterval maps to cli flags: --sleep-interval/--min-sleep-interval=SECONDS.
func (ff *WorkaroundBuilder) SleepInterval(seconds float64) *WorkaroundBuilder {
	ff.parent.addFlag(&sleepIntervalFlag{
		args: []float64{seconds},
	})
	return ff
}

type maxSleepIntervalFlag struct {
	args []float64
}

var _ Flag = (*maxSleepIntervalFlag)(nil) // ensure maxSleepIntervalFlag implements Flag interface.

func (f *maxSleepIntervalFlag) ID() string {
	return "max_sleep_interval"
}

func (f *maxSleepIntervalFlag) String() string {
	return "TODO"
}

func (f *maxSleepIntervalFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Maximum number of seconds to sleep. Can only be used along with
// --min-sleep-interval
//
// MaxSleepInterval maps to cli flags: --max-sleep-interval=SECONDS.
func (ff *WorkaroundBuilder) MaxSleepInterval(seconds float64) *WorkaroundBuilder {
	ff.parent.addFlag(&maxSleepIntervalFlag{
		args: []float64{seconds},
	})
	return ff
}

type sleepSubtitlesFlag struct {
	args []int
}

var _ Flag = (*sleepSubtitlesFlag)(nil) // ensure sleepSubtitlesFlag implements Flag interface.

func (f *sleepSubtitlesFlag) ID() string {
	return "sleep_interval_subtitles"
}

func (f *sleepSubtitlesFlag) String() string {
	return "TODO"
}

func (f *sleepSubtitlesFlag) AsFlag() []string {
	return []string{"TODO"}
}

// Number of seconds to sleep before each subtitle download
//
// SleepSubtitles maps to cli flags: --sleep-subtitles=SECONDS.
func (ff *WorkaroundBuilder) SleepSubtitles(seconds int) *WorkaroundBuilder {
	ff.parent.addFlag(&sleepSubtitlesFlag{
		args: []int{seconds},
	})
	return ff
}
